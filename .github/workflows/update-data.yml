name: Odoo Veri Guncelleme

on:
  schedule:
    - cron: '0 1 * * *'  # Her gece saat 04:00 (Turkiye saati)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Gerekli kutuphaneleri kur
      run: |
        pip install requests
    
    - name: Odoo'dan veri cek
      env:
        ODOO_URL: ${{ secrets.ODOO_URL }}
        ODOO_USERNAME: ${{ secrets.ODOO_USERNAME }}
        ODOO_API_KEY: ${{ secrets.ODOO_API_KEY }}
      run: |
        python3 << 'EOF'
        import os
        import requests
        import json
        from datetime import datetime
        import warnings
        import xmlrpc.client
        import ssl
        
        warnings.filterwarnings('ignore')
        ssl._create_default_https_context = ssl._create_unverified_context
        
        print("=" * 60)
        print("üöÄ Odoo ERP - Veri Cekme Basladi")
        print("=" * 60)
        
        url = os.environ['ODOO_URL']
        if not url.startswith('http'):
            url = f"https://{url}"
        
        username = os.environ['ODOO_USERNAME']
        password = os.environ['ODOO_API_KEY']
        db = "erp.zuhalmuzik.com"
        
        print(f"üîå URL: {url}")
        print(f"üë§ Username: {username}")
        
        try:
            session = requests.Session()
            auth_url = f"{url}/web/session/authenticate"
            
            auth_payload = {
                "jsonrpc": "2.0",
                "method": "call",
                "params": {
                    "db": db,
                    "login": username,
                    "password": password
                },
                "id": 1
            }
            
            print("\nüîê Kimlik dogrulama yapiliyor...")
            response = session.post(auth_url, json=auth_payload, headers={"Content-Type": "application/json"}, verify=False, timeout=30)
            
            if response.status_code != 200:
                print(f"‚ùå HTTP Hatasi: {response.status_code}")
                exit(1)
            
            result = response.json()
            
            if 'error' in result:
                print(f"‚ùå Odoo Hatasi: {result['error']}")
                exit(1)
            
            if 'result' in result:
                session_info = result['result']
                
                if session_info and isinstance(session_info, dict):
                    uid = session_info.get('uid')
                    
                    if uid:
                        print(f"‚úÖ Baglanti basarili! (UID: {uid})")
                        
                        # XML-RPC baglantisi
                        print("\nüîÑ XML-RPC baglantisi kuruluyor...")
                        common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
                        models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
                        uid_xmlrpc = common.authenticate(db, username, password, {})
                        
                        if not uid_xmlrpc:
                            print("‚ùå XML-RPC authentication basarisiz!")
                            exit(1)
                        
                        print(f"‚úÖ XML-RPC baglantisi basarili!")
                        
                        # Filtre cek
                        print("\nüîç Akasya Test filtresi araniyor...")
                        try:
                            filters = models.execute_kw(
                                db, uid_xmlrpc, password,
                                'ir.filters', 'search_read',
                                [[('user_id', '=', uid_xmlrpc), ('model_id', '=', 'account.invoice.report')]],
                                {'fields': ['name', 'domain']}
                            )
                            
                            if not filters:
                                filters = models.execute_kw(
                                    db, uid_xmlrpc, password,
                                    'ir.filters', 'search_read',
                                    [[('user_id', '=', uid_xmlrpc), ('model_id', '=', 'account.move.line')]],
                                    {'fields': ['name', 'domain']}
                                )
                            
                            akasya_filter = None
                            for f in filters:
                                if 'akasya' in f['name'].lower():
                                    akasya_filter = f
                                    print(f"‚úÖ Filtre bulundu: {f['name']}")
                                    break
                            
                            if akasya_filter:
                                import ast
                                domain = ast.literal_eval(akasya_filter['domain']) if akasya_filter['domain'] else []
                                converted_domain = []
                                for item in domain:
                                    if isinstance(item, tuple) and len(item) >= 3:
                                        field, operator, value = item[0], item[1], item[2]
                                        if field == 'state':
                                            field = 'move_id.state'
                                        elif field == 'move_type':
                                            field = 'move_id.move_type'
                                        elif field == 'product_categ_id':
                                            field = 'product_id.categ_id'
                                        converted_domain.append((field, operator, value))
                                    else:
                                        converted_domain.append(item)
                                converted_domain.append(('display_type', '=', False))
                                domain = converted_domain
                            else:
                                print("‚ö†Ô∏è Filtre bulunamadi, varsayilan kullaniliyor...")
                                domain = [
                                    ('move_id.state', '=', 'posted'),
                                    ('move_id.move_type', '=', 'out_invoice'),
                                    ('display_type', '=', False)
                                ]
                        except Exception as e:
                            print(f"‚ö†Ô∏è Filtre cekme hatasi: {e}")
                            domain = [
                                ('move_id.state', '=', 'posted'),
                                ('move_id.move_type', '=', 'out_invoice'),
                                ('display_type', '=', False)
                            ]
                        
                        # Kayit sayisi
                        count = models.execute_kw(db, uid_xmlrpc, password, 'account.move.line', 'search_count', [domain])
                        print(f"üìä Toplam kayit: {count:,}")
                        
                        # Veri cek (batch)
                        print("\nüì¶ Veriler cekiliyor...")
                        
                        # ONCE: Hangi alanlarin mevcut oldugunu test et
                        print("\nüîç Mevcut alanlari test ediyoruz...")
                        test_fields_list = [
                            ['move_id', 'date', 'product_id', 'quantity', 'price_subtotal', 'partner_id', 'analytic_account_id', 'display_type'],
                            ['price_usd_subtotal'],
                            ['usd_rate'],
                            ['x_studio_usd_tutar'],
                            ['x_studio_usd_kur'],
                            ['currency_id', 'amount_currency'],
                            ['balance']
                        ]
                        
                        working_fields = ['move_id', 'date', 'product_id', 'quantity', 'price_subtotal', 'partner_id', 'analytic_account_id', 'display_type']
                        
                        for test_fields in test_fields_list[1:]:  # Temel alanlari atla
                            try:
                                test_result = models.execute_kw(
                                    db, uid_xmlrpc, password,
                                    'account.move.line', 'search_read',
                                    [domain],
                                    {'fields': working_fields + test_fields, 'limit': 1}
                                )
                                if test_result:
                                    working_fields.extend(test_fields)
                                    print(f"   ‚úÖ {test_fields} alanlari mevcut!")
                            except Exception as e:
                                print(f"   ‚ùå {test_fields} alanlari mevcut degil: {str(e)[:100]}")
                        
                        print(f"\n‚úÖ Kullanilacak alanlar: {working_fields}")
                        fields = working_fields
                        
                        all_data = []
                        batch_size = 5000  # Daha kucuk batch (10000'den 5000'e)
                        offset = 0
                        max_errors = 10  # Daha fazla hata toleransi
                        error_count = 0
                        consecutive_errors = 0  # Ardasik hata sayaci
                        
                        while True:
                            batch_num = offset // batch_size + 1
                            print(f"   Batch {batch_num}: {offset} - {offset + batch_size}")
                            
                            try:
                                batch_data = models.execute_kw(
                                    db, uid_xmlrpc, password,
                                    'account.move.line', 'search_read',
                                    [domain],
                                    {'fields': fields, 'limit': batch_size, 'offset': offset}
                                )
                                
                                if not batch_data:
                                    print(f"   ‚úÖ Veri bitti (bos batch)")
                                    break
                                
                                all_data.extend(batch_data)
                                consecutive_errors = 0  # Reset consecutive errors
                                print(f"   ‚úÖ {len(batch_data)} kayit eklendi (Toplam: {len(all_data)})")
                                
                                # DEBUG: Ilk kaydin TUM alanlarini goster
                                if len(all_data) == len(batch_data):
                                    print(f"\nüîç DEBUG: Ilk kaydin alanlari:")
                                    if batch_data and len(batch_data) > 0:
                                        first_record = batch_data[0]
                                        for key in sorted(first_record.keys()):
                                            value = first_record[key]
                                            if isinstance(value, (int, float, str, bool)):
                                                print(f"   {key}: {value}")
                                            elif isinstance(value, list) and len(value) > 0:
                                                print(f"   {key}: {value[0] if len(value) == 1 else value[:2]}")
                                    print()
                                
                                if len(batch_data) < batch_size:
                                    print(f"   ‚úÖ Son batch!")
                                    break
                                
                                offset += batch_size
                                
                            except Exception as e:
                                error_count += 1
                                consecutive_errors += 1
                                error_msg = str(e)
                                
                                # Hata tipini belirle
                                if 'not well-formed' in error_msg or 'invalid token' in error_msg:
                                    print(f"   ‚ö†Ô∏è Batch {batch_num}: XML parse hatasi (bozuk karakter)")
                                elif 'MemoryError' in error_msg or 'memory' in error_msg.lower():
                                    print(f"   ‚ö†Ô∏è Batch {batch_num}: Hafiza hatasi")
                                elif 'timeout' in error_msg.lower():
                                    print(f"   ‚ö†Ô∏è Batch {batch_num}: Timeout hatasi")
                                else:
                                    print(f"   ‚ö†Ô∏è Batch {batch_num}: {error_msg[:150]}")
                                
                                print(f"   ‚è≠Ô∏è Batch atlaniyor... (Toplam hata: {error_count}, Ardasik: {consecutive_errors})")
                                
                                # √áok fazla ardƒ±≈üƒ±k hata varsa dur
                                if consecutive_errors >= 3:
                                    print(f"   ‚ùå 3 ardasik hata! Durduruluyor...")
                                    break
                                
                                # Toplam hata limiti
                                if error_count >= max_errors:
                                    print(f"   ‚ùå Cok fazla hata ({max_errors}), durduruluyor...")
                                    break
                                
                                # Skip problematic batch and continue
                                offset += batch_size
                                continue
                        
                        print(f"\n‚úÖ {len(all_data)} kayit cekildi!")
                        
                        # DEBUG: Ilk 3 kaydin para birimi bilgilerini goster
                        if len(all_data) > 0:
                            print("\nüîç DEBUG: Ilk 3 kaydin para birimi bilgileri:")
                            for i, record in enumerate(all_data[:3]):
                                print(f"\n   Kayit {i+1}:")
                                print(f"      Tarih: {record.get('date')}")
                                print(f"      Urun: {record.get('product_id', [0, 'N/A'])[1][:40] if record.get('product_id') else 'N/A'}")
                                print(f"      Miktar: {record.get('quantity', 0)}")
                                print(f"      Para Birimi: {record.get('currency_id', [0, 'N/A'])[1] if record.get('currency_id') else 'N/A'}")
                                print(f"      amount_currency: {record.get('amount_currency', 0)}")
                                print(f"      price_subtotal (TL): {record.get('price_subtotal', 0)}")
                                print(f"      gl_currency_rate: {record.get('gl_currency_rate', 0)}")
                                print(f"      balance: {record.get('balance', 0)}")
                        
                        # Satis temsilcilerini cek
                        print("\nüë§ Satis temsilcileri cekiliyor...")
                        move_ids = list(set([line['move_id'][0] for line in all_data if line.get('move_id')]))
                        invoice_user_map = {}
                        
                        for i in range(0, len(move_ids), 5000):
                            batch_ids = move_ids[i:i+5000]
                            batch_moves = models.execute_kw(
                                db, uid_xmlrpc, password,
                                'account.move', 'search_read',
                                [[('id', 'in', batch_ids)]],
                                {'fields': ['id', 'invoice_user_id', 'user_id']}
                            )
                            for move in batch_moves:
                                move_id = move['id']
                                if move.get('invoice_user_id'):
                                    invoice_user_map[move_id] = move['invoice_user_id'][1]
                                elif move.get('user_id'):
                                    invoice_user_map[move_id] = move['user_id'][1]
                                else:
                                    invoice_user_map[move_id] = 'Sistem'
                        
                        print(f"‚úÖ {len(invoice_user_map)} satis temsilcisi eslesti!")
                        
                        # Urunleri cek
                        print("\nüì¶ Urunler cekiliyor...")
                        product_ids = list(set([line['product_id'][0] for line in all_data if line.get('product_id')]))
                        products = []
                        
                        for i in range(0, len(product_ids), 5000):
                            batch_ids = product_ids[i:i+5000]
                            batch_products = models.execute_kw(
                                db, uid_xmlrpc, password,
                                'product.product', 'search_read',
                                [[('id', 'in', batch_ids)]],
                                {'fields': ['id', 'categ_id', 'product_brand_id']}
                            )
                            products.extend(batch_products)
                        
                        print(f"‚úÖ {len(products)} urun cekildi!")
                        
                        # Kategorileri cek
                        print("\nüìÇ Kategoriler cekiliyor...")
                        categ_ids = list(set([prod['categ_id'][0] for prod in products if prod.get('categ_id')]))
                        categories = models.execute_kw(
                            db, uid_xmlrpc, password,
                            'product.category', 'search_read',
                            [[('id', 'in', categ_ids)]],
                            {'fields': ['id', 'name', 'complete_name']}
                        )
                        
                        category_hierarchy = {}
                        for cat in categories:
                            cat_name = cat.get('complete_name') or cat.get('name')
                            cat_levels = cat_name.split(' / ')
                            
                            # "All" root kategorisini atla
                            if cat_levels[0].lower() == 'all' and len(cat_levels) > 1:
                                cat_levels = cat_levels[1:]  # ƒ∞lk "All"ƒ± atla
                            
                            category_hierarchy[cat['id']] = {
                                'name': cat_name,
                                'level1': cat_levels[0] if len(cat_levels) > 0 else '',
                                'level2': cat_levels[1] if len(cat_levels) > 1 else '',
                                'level3': cat_levels[2] if len(cat_levels) > 2 else '',
                                'level4': cat_levels[3] if len(cat_levels) > 3 else '',
                                'level5': cat_levels[4] if len(cat_levels) > 4 else ''
                            }
                        
                        product_categ_map = {}
                        product_brand_map = {}
                        for prod in products:
                            prod_id = prod['id']
                            if prod.get('categ_id'):
                                product_categ_map[prod_id] = prod['categ_id'][0]
                            if prod.get('product_brand_id') and isinstance(prod.get('product_brand_id'), list):
                                product_brand_map[prod_id] = prod['product_brand_id'][1]
                            else:
                                product_brand_map[prod_id] = 'Bilinmeyen'
                        
                        print(f"‚úÖ {len(category_hierarchy)} kategori cekildi!")
                        
                        # Partnerleri cek
                        print("\nü§ù Partnerler cekiliyor...")
                        partner_ids = list(set([line['partner_id'][0] for line in all_data if line.get('partner_id')]))
                        partners = []
                        
                        for i in range(0, len(partner_ids), 5000):
                            batch_ids = partner_ids[i:i+5000]
                            batch_partners = models.execute_kw(
                                db, uid_xmlrpc, password,
                                'res.partner', 'search_read',
                                [[('id', 'in', batch_ids)]],
                                {'fields': ['id', 'name', 'city', 'state_id', 'category_id']}
                            )
                            partners.extend(batch_partners)
                        
                        partner_city_map = {}
                        partner_tags_map = {}
                        
                        for partner in partners:
                            partner_id = partner['id']
                            if partner.get('state_id'):
                                partner_city_map[partner_id] = partner['state_id'][1]
                            elif partner.get('city'):
                                partner_city_map[partner_id] = partner['city']
                            else:
                                partner_city_map[partner_id] = 'Bilinmeyen'
                        
                        # Etiketleri cek (category_id)
                        for p in partners:
                            partner_id = p['id']
                            category_ids = p.get('category_id', [])
                            
                            if category_ids and isinstance(category_ids, list) and len(category_ids) > 0:
                                # category_id liste halinde gelir: [[id1, name1], [id2, name2], ...]
                                if isinstance(category_ids[0], list):
                                    tag_names = [cat[1] for cat in category_ids if len(cat) > 1]
                                    partner_tags_map[partner_id] = ', '.join(tag_names)
                                else:
                                    partner_tags_map[partner_id] = ''
                            else:
                                partner_tags_map[partner_id] = ''
                        
                        print(f"‚úÖ {len(partners)} partner cekildi!")
                        
                        # JSON olustur
                        print("\nüìä JSON olusturuluyor...")
                        
                        details = []
                        skipped_display_type = 0
                        skipped_no_usd = 0
                        
                        # USD hesaplama stratejisini belirle
                        has_currency = 'currency_id' in working_fields and 'amount_currency' in working_fields
                        has_gl_rate = 'gl_currency_rate' in working_fields
                        has_balance = 'balance' in working_fields
                        
                        print(f"üí∞ USD hesaplama:")
                        print(f"   currency_id + amount_currency: {'‚úÖ' if has_currency else '‚ùå'}")
                        print(f"   gl_currency_rate: {'‚úÖ' if has_gl_rate else '‚ùå'}")
                        print(f"   balance: {'‚úÖ' if has_balance else '‚ùå'}")
                        
                        for line in all_data:
                            try:
                                # SADECE GERCEK URUN SATIRLARI (baslik/not degil)
                                display_type = line.get('display_type')
                                if display_type and display_type != False:
                                    skipped_display_type += 1
                                    continue
                                
                                product_id = line['product_id'][0] if line.get('product_id') else 0
                                partner_id = line['partner_id'][0] if line.get('partner_id') else 0
                                move_id = line['move_id'][0] if line.get('move_id') else 0
                                
                                cat_id = product_categ_map.get(product_id)
                                cat_info = category_hierarchy.get(cat_id, {})
                                
                                # USD tutar hesaplama - DOGRU YONTEM
                                usd_amount = 0
                                
                                if has_currency:
                                    # Para birimi kontrolu yap
                                    currency_id = line.get('currency_id')
                                    amount_currency = float(line.get('amount_currency', 0))
                                    
                                    if currency_id and isinstance(currency_id, list) and len(currency_id) >= 2:
                                        currency_code = currency_id[1]  # 'USD', 'TRY', 'EUR' vs.
                                        
                                        if currency_code == 'USD':
                                            # Zaten USD
                                            usd_amount = abs(amount_currency)
                                        elif currency_code == 'TRY':
                                            # TRY -> USD donusumu
                                            if has_gl_rate:
                                                rate = float(line.get('gl_currency_rate', 0))
                                                if rate > 0:
                                                    usd_amount = abs(amount_currency) / rate
                                            else:
                                                # Fallback: price_subtotal / sabit kur
                                                price_subtotal = float(line.get('price_subtotal', 0))
                                                usd_amount = price_subtotal / 41.70
                                        else:
                                            # Diger para birimleri (EUR vs.) - simdilik atla
                                            skipped_no_usd += 1
                                            continue
                                    else:
                                        # currency_id yok, price_subtotal kullan
                                        price_subtotal = float(line.get('price_subtotal', 0))
                                        usd_amount = price_subtotal / 41.70
                                
                                elif has_balance:
                                    # Balance kullan (son care)
                                    usd_amount = abs(float(line.get('balance', 0)))
                                
                                else:
                                    # Hicbiri yok, price_subtotal / sabit kur
                                    price_subtotal = float(line.get('price_subtotal', 0))
                                    usd_amount = price_subtotal / 41.70
                                
                                # Eger USD tutar yoksa atla
                                if usd_amount == 0:
                                    skipped_no_usd += 1
                                    continue
                                
                                details.append({
                                    'date': line.get('date', ''),
                                    'partner': line['partner_id'][1] if line.get('partner_id') else '',
                                    'product': line['product_id'][1] if line.get('product_id') else '',
                                    'brand': product_brand_map.get(product_id, 'Bilinmeyen'),
                                    'category_1': cat_info.get('level1', ''),
                                    'category_2': cat_info.get('level2', ''),
                                    'category_3': cat_info.get('level3', ''),
                                    'category_4': cat_info.get('level4', ''),
                                    'category_5': cat_info.get('level5', ''),
                                    'tags': partner_tags_map.get(partner_id, ''),
                                    'sales_person': invoice_user_map.get(move_id, 'Sistem'),
                                    'store': line['analytic_account_id'][1] if line.get('analytic_account_id') else 'Genel',
                                    'city': partner_city_map.get(partner_id, 'Bilinmeyen'),
                                    'quantity': line.get('quantity', 0),
                                    'usd_amount': round(usd_amount, 2)
                                })
                            except Exception as e:
                                print(f"   Satir isleme hatasi: {str(e)[:100]}")
                                continue
                        
                        print(f"\nüìä Isleme ozeti:")
                        print(f"   Toplam cekilen: {len(all_data)}")
                        print(f"   Atlanan (display_type): {skipped_display_type}")
                        print(f"   Atlanan (USD=0): {skipped_no_usd}")
                        print(f"   JSON'a eklenen: {len(details)}")
                        
                        output = {
                            'last_update': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                            'total_records': len(details),
                            'details': details
                        }
                        
                        with open('data.json', 'w', encoding='utf-8') as f:
                            json.dump(output, f, ensure_ascii=False, indent=2)
                        
                        print(f"\n‚úÖ data.json olusturuldu! ({len(details)} kayit)")
                        print("=" * 60)
                        print("üéâ ISLEM TAMAMLANDI!")
                        print("=" * 60)
                    else:
                        print("‚ùå UID bulunamadi!")
                        exit(1)
                else:
                    print("‚ùå Gecersiz session!")
                    exit(1)
            else:
                print("‚ùå Beklenmeyen yanit!")
                exit(1)
                
        except Exception as e:
            print(f"‚ùå Hata: {e}")
            import traceback
            traceback.print_exc()
            exit(1)
        
        EOF
    
    - name: Degisiklikleri commit et ve yukle
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if [[ -f "data.json" ]]; then
          echo "‚úÖ data.json bulundu"
          
          git fetch origin
          git pull --rebase origin main || git pull origin main || git reset --hard origin/main
          
          git add data.json
          
          if [[ -n $(git status -s) ]]; then
            git commit -m "Veriler guncellendi - $(date +'%Y-%m-%d %H:%M')"
            git push
            echo "‚úÖ GitHub'a yuklendi!"
          else
            echo "‚ÑπÔ∏è Degisiklik yok"
          fi
        else
          echo "‚ö†Ô∏è data.json bulunamadi"
        fi

