name: Odoo Veri Güncelleme

on:
  # schedule:
  #   - cron: '0 23 * * *'  # Otomatik çalışma kapatıldı
  workflow_dispatch:  # Manuel çalıştırma aktif

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}
        persist-credentials: true
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Gerekli kütüphaneleri kur
      run: |
        pip install requests
    
    - name: Odoo'dan veri çek
      env:
        ODOO_URL: ${{ secrets.ODOO_URL }}
        ODOO_USERNAME: ${{ secrets.ODOO_USERNAME }}
        ODOO_API_KEY: ${{ secrets.ODOO_API_KEY }}
      run: |
        python3 << 'EOF'
        import os
        import requests
        import json
        from datetime import datetime
        import warnings
        import xmlrpc.client
        import ssl
        
        warnings.filterwarnings('ignore')
        ssl._create_default_https_context = ssl._create_unverified_context
        
        print("=" * 60)
        print("🚀 Odoo 15 API Test - Yeni Kullanıcı")
        print("=" * 60)
        
        url = os.environ['ODOO_URL']
        username = os.environ['ODOO_USERNAME']
        password = os.environ['ODOO_API_KEY']
        db = "erp.zuhalmuzik.com"
        
        print(f"🔌 URL: {url}")
        print(f"🗄️ Database: {db}")
        print(f"👤 Username: {username}")
        print(f"🔐 Password: {'*' * len(password)}")
        
        try:
            session = requests.Session()
            
            # Odoo 15 authenticate
            auth_url = f"{url}/web/session/authenticate"
            
            auth_payload = {
                "jsonrpc": "2.0",
                "method": "call",
                "params": {
                    "db": db,
                    "login": username,
                    "password": password
                },
                "id": 1
            }
            
            print("\n🔐 Kimlik doğrulama yapılıyor...")
            
            response = session.post(
                auth_url,
                json=auth_payload,
                headers={"Content-Type": "application/json"},
                verify=False,
                timeout=30
            )
            
            print(f"📡 HTTP Status: {response.status_code}")
            
            if response.status_code != 200:
                print(f"❌ HTTP Hatası: {response.status_code}")
                print(f"Response: {response.text[:500]}")
                exit(1)
            
            result = response.json()
            
            # Hata kontrolü
            if 'error' in result:
                error_data = result['error'].get('data', {})
                error_msg = error_data.get('message', result['error'].get('message', 'Bilinmeyen'))
                error_name = error_data.get('name', 'Bilinmeyen')
                
                print(f"❌ Odoo Hatası: {error_name}")
                print(f"📝 Mesaj: {error_msg}")
                
                # Detaylı debug
                if 'debug' in error_data:
                    debug = error_data['debug']
                    if 'database' in debug.lower():
                        print("\n💡 VERİTABANI HATASI TESPİT EDİLDİ!")
                        print("Denenen DB:", db)
                    elif 'access denied' in debug.lower() or 'credentials' in debug.lower():
                        print("\n💡 KULLANICI ADI/ŞİFRE HATASI!")
                        print("Username kontrol edin:", username)
                    elif '2fa' in debug.lower() or 'two factor' in debug.lower():
                        print("\n💡 2FA SORUNU!")
                        print("Kullanıcıda 2FA kapalı mı kontrol edin")
                
                exit(1)
            
            # Başarılı giriş
            if 'result' in result:
                session_info = result['result']
                
                if session_info and isinstance(session_info, dict):
                    uid = session_info.get('uid')
                    
                    if uid:
                        print("\n" + "=" * 60)
                        print("✅ BAŞARILI! ODOO'YA BAĞLANILDI!")
                        print("=" * 60)
                        print(f"👤 User ID: {uid}")
                        print(f"👤 İsim: {session_info.get('name', 'N/A')}")
                        print(f"🏢 Şirket: {session_info.get('company_name', 'N/A')}")
                        print(f"🗄️ Gerçek DB: {session_info.get('db', 'N/A')}")
                        print(f"🌍 User Context: {session_info.get('user_context', {})}")
                        
                        # Veri çekme testi
                        print("\n" + "=" * 60)
                        print("🎉 GİRİŞ BAŞARILI! XML-RPC İLE VERİ ÇEKMEYE GEÇİYORUZ")
                        print("=" * 60)
                        
                        # XML-RPC ile devam et (daha stabil)
                        print("\n🔄 XML-RPC bağlantısı kuruluyor...")
                        
                        try:
                            common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
                            models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
                            
                            # Tekrar authenticate (XML-RPC için)
                            uid_xmlrpc = common.authenticate(db, username, password, {})
                            
                            if not uid_xmlrpc:
                                print("❌ XML-RPC authentication başarısız!")
                                exit(1)
                            
                            print(f"✅ XML-RPC bağlantısı başarılı! (UID: {uid_xmlrpc})")
                        except Exception as e:
                            print(f"❌ XML-RPC hatası: {e}")
                            print("⚠️ REST API ile devam ediliyor...")
                            models = None
                        
                        # KAPSAMLI VERİ ÇEKME BAŞLIYOR
                        print("\n" + "=" * 60)
                        print("📊 KAPSAMLI VERİ ÇEKME BAŞLADI")
                        print("=" * 60)
                        
                        # XML-RPC İLE VERİ ÇEK
                        print("\n1️⃣ TestDeneme filtresi ile fatura satırları çekiliyor (XML-RPC)...")
                        
                        if models:
                            # XML-RPC ile çek
                            try:
                                print("⏳ Veri çekiliyor (bu 2-3 dakika sürebilir)...")
                                
                                # TestDeneme FİLTRESİ - Kullanıcının kaydedilmiş filtresini çek
                                print("🔍 'TestDeneme' filtresinin domain'i çekiliyor...")
                                
                                try:
                                    # SADECE 'TestDeneme' FİLTRESİNİ ARA (TEK YER)
                                    print("🔍 'TestDeneme' filtresi aranıyor...")
                                    
                                    filters = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'ir.filters', 'search_read',
                                        [[
                                            ('user_id', '=', uid_xmlrpc),
                                            ('model_id', '=', 'account.invoice.report'),
                                            ('name', '=', 'TestDeneme')
                                        ]],
                                        {'fields': ['name', 'domain', 'context']}
                                    )
                                    
                                    # Filtre bulunamadıysa HATA VER VE DURDUR
                                    if not filters or len(filters) == 0:
                                        print("❌ HATA: 'TestDeneme' filtresi bulunamadı!")
                                        print("❌ Kullanıcıya özel account.invoice.report'ta 'TestDeneme' filtresi olmalı.")
                                        exit(1)
                                    
                                    # Filtre bulundu
                                    filter_data = filters[0]
                                    print(f"✅ 'TestDeneme' filtresi bulundu!")
                                    print(f"📋 Domain: {filter_data['domain']}")
                                    
                                    # KONTROL: Filtre out_refund'ları dahil ediyor mu?
                                    if 'out_refund' in str(filter_data['domain']):
                                        print("⚠️ DİKKAT: Filtre domain'inde 'out_refund' bulundu!")
                                    else:
                                        print("⚠️ UYARI: Filtre domain'inde 'out_refund' YOK - İadeler filtrede hariç tutulmuş olabilir!")
                                    
                                    # Domain'i parse et
                                    import ast
                                    domain = ast.literal_eval(filter_data['domain']) if filter_data['domain'] else []
                                    
                                    if not domain:
                                        print("❌ HATA: Filtre domain'i boş!")
                                        exit(1)
                                    
                                    # Domain'i account.move.line formatına çevir
                                    print("🔄 Domain account.move.line formatına çevriliyor...")
                                    converted_domain = []
                                    has_move_type_filter = False
                                    
                                    for item in domain:
                                        if isinstance(item, tuple) and len(item) >= 3:
                                            field, operator, value = item[0], item[1], item[2]
                                            # Alan adlarını dönüştür
                                            if field == 'state':
                                                # account.move.line'da state alanı yok, atla
                                                continue
                                            elif field == 'move_type':
                                                field = 'move_id.move_type'
                                                has_move_type_filter = True
                                                # ÖNEMLİ: move_type filtresini out_invoice VE out_refund içerecek şekilde değiştir
                                                if operator == '=' and value == 'out_invoice':
                                                    # Sadece out_invoice varsa, out_refund'u da ekle
                                                    operator = 'in'
                                                    value = ('out_invoice', 'out_refund')
                                                    print("🔧 move_type filtresi güncellendi: out_invoice + out_refund dahil")
                                                elif operator == 'in' and isinstance(value, (list, tuple)):
                                                    # Eğer liste varsa ve out_refund yoksa ekle
                                                    value_list = list(value)
                                                    if 'out_invoice' in value_list and 'out_refund' not in value_list:
                                                        value_list.append('out_refund')
                                                        value = tuple(value_list)
                                                        print("🔧 move_type filtresine out_refund eklendi")
                                            elif field == 'analytic_account_id':
                                                field = 'analytic_account_id'
                                            elif field == 'product_categ_id':
                                                field = 'product_id.categ_id'
                                            elif field == 'product_id':
                                                field = 'product_id'
                                            converted_domain.append((field, operator, value))
                                        else:
                                            converted_domain.append(item)
                                    
                                    # Eğer move_type filtresi yoksa ekle (hem out_invoice hem out_refund)
                                    if not has_move_type_filter:
                                        converted_domain.append(('move_id.move_type', 'in', ('out_invoice', 'out_refund')))
                                        print("➕ move_type filtresi eklendi: out_invoice + out_refund")
                                    
                                    # display_type ekle
                                    converted_domain.append(('display_type', '=', False))
                                    domain = converted_domain
                                    print(f"✅ Domain dönüştürüldü: {len(domain)} koşul")
                                    
                                except Exception as e:
                                    print(f"❌ HATA: Filtre çekme hatası: {e}")
                                    import traceback
                                    traceback.print_exc()
                                    exit(1)
                                
                                # Kayıt sayısını kontrol et (account.move.line)
                                count = models.execute_kw(
                                    db, uid_xmlrpc, password,
                                    'account.move.line', 'search_count',
                                    [domain]
                                )
                                print(f"📊 Filtrelenmiş kayıt sayısı: {count:,}")
                                
                                # account.move.line alanları
                                fields = [
                                    'move_id', 'date', 'create_date', 'write_date',
                                    'product_id', 'quantity', 'price_subtotal', 
                                    'currency_id', 'partner_id', 'analytic_account_id', 'id'
                                ]
                                
                                # TÜM VERİYİ BATCH (PARÇA PARÇA) ÇEK
                                print("⚠️ Tüm fatura satırları çekiliyor (10,000'erlik parçalar halinde)...")
                                
                                all_data = []
                                batch_size = 10000
                                offset = 0
                                batch_count = 0
                                
                                max_errors = 5
                                error_count = 0
                                
                                while True:
                                    batch_count += 1
                                    print(f"📦 Batch {batch_count}: {offset} - {offset + batch_size} arası çekiliyor...")
                                    
                                    try:
                                        batch_data = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'account.move.line', 'search_read',
                                            [domain],
                                            {'fields': fields, 'limit': batch_size, 'offset': offset}
                                        )
                                        
                                        if not batch_data or len(batch_data) == 0:
                                            print(f"✅ Batch {batch_count}: Veri bitti!")
                                            break
                                        
                                        all_data.extend(batch_data)
                                        print(f"✅ Batch {batch_count}: {len(batch_data)} kayıt eklendi (Toplam: {len(all_data)})")
                                        
                                        # Hata sayacını sıfırla (başarılı batch)
                                        error_count = 0
                                        
                                        if len(batch_data) < batch_size:
                                            print(f"✅ Son batch tamamlandı!")
                                            break
                                        
                                        offset += batch_size
                                        
                                    except Exception as e:
                                        error_count += 1
                                        print(f"⚠️ Batch {batch_count} hatası: {str(e)[:100]}")
                                        print(f"⏭️ Batch atlanıyor... (Hata: {error_count}/{max_errors})")
                                        
                                        if error_count >= max_errors:
                                            print(f"❌ Çok fazla hata ({max_errors}), durduruluyor...")
                                            break
                                        
                                        # Hatalı batch'i atla
                                        offset += batch_size
                                        continue
                                
                                print(f"\n✅ TOPLAM {len(all_data)} fatura satırı çekildi (XML-RPC)!")
                                print(f"📊 Veri boyutu: ~{len(all_data) * 0.5 / 1024:.2f} MB")
                                
                                # HİBRİT YÖNTEM: USD tutarları VE ŞEHİR bilgisini account.invoice.report'tan çek
                                print(f"\n💰 USD tutarları ve şehir bilgisi account.invoice.report'tan çekiliyor (HİBRİT YÖNTEM)...")
                                
                                # move.line ID'lerini topla
                                line_ids = [line.get('id') for line in all_data if line.get('id')]
                                print(f"📦 {len(line_ids)} satır için USD tutar ve şehir çekilecek...")
                                
                                usd_amount_map = {}
                                state_id_map = {}  # Şehir bilgisi için yeni map
                                usd_rate_map = {}  # KUR bilgisi için yeni map
                                try:
                                    # account.invoice.report'tan USD tutarlarını, state_id ve usd_rate'i batch olarak çek
                                    for i in range(0, len(line_ids), 5000):
                                        batch_ids = line_ids[i:i+5000]
                                        print(f"   💵 USD + Şehir + KUR batch {i//5000 + 1}: {len(batch_ids)} kayıt...")
                                        
                                        # account.invoice.report'tan price_usd_subtotal, state_id ve usd_rate çek
                                        usd_batch = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'account.invoice.report', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'price_usd_subtotal', 'state_id', 'usd_rate']}
                                        )
                                        
                                        for usd_record in usd_batch:
                                            line_id = usd_record.get('id')
                                            usd_subtotal = usd_record.get('price_usd_subtotal', 0)
                                            state_id = usd_record.get('state_id')
                                            usd_rate = usd_record.get('usd_rate', 0)
                                            
                                            usd_amount_map[line_id] = float(usd_subtotal) if usd_subtotal else 0
                                            
                                            # state_id'yi şehir adına çevir
                                            if state_id and isinstance(state_id, list) and len(state_id) > 1:
                                                state_id_map[line_id] = state_id[1]  # [id, name] formatında geliyor
                                            else:
                                                state_id_map[line_id] = 'Bilinmeyen'
                                            
                                            # usd_rate'i kaydet
                                            if usd_rate and float(usd_rate) > 0:
                                                usd_rate_map[line_id] = float(usd_rate)
                                    
                                    print(f"✅ {len(usd_amount_map)} satır için USD tutar eşleştirildi!")
                                    print(f"✅ {len(state_id_map)} satır için şehir bilgisi eşleştirildi!")
                                    print(f"✅ {len(usd_rate_map)} satır için KUR bilgisi eşleştirildi!")
                                    
                                    # İstatistik
                                    with_usd = sum(1 for v in usd_amount_map.values() if v != 0)
                                    total_usd = sum(usd_amount_map.values())
                                    with_city = sum(1 for c in state_id_map.values() if c != 'Bilinmeyen')
                                    with_rate = len(usd_rate_map)
                                    print(f"   💰 USD olan: {with_usd}")
                                    print(f"   💵 Toplam USD: ${total_usd:,.2f}")
                                    print(f"   🏙️ Şehir bilgisi olan: {with_city}")
                                    print(f"   💱 KUR bilgisi olan: {with_rate}")
                                    
                                except Exception as e:
                                    print(f"⚠️ USD tutar + şehir + kur çekme hatası: {e}")
                                    print(f"⚠️ Fallback: account.move'dan currency_rate çekilecek")
                                    usd_amount_map = {}
                                    state_id_map = {}
                                    usd_rate_map = {}
                                
                                # Satış temsilcileri ve KUR bilgilerini çek (account.move'dan)
                                print(f"\n👤 Satış temsilcileri ve KUR bilgileri çekiliyor...")
                                move_ids = list(set([line.get('move_id')[0] for line in all_data if line.get('move_id') and isinstance(line.get('move_id'), list)]))
                                print(f"📦 {len(move_ids)} fatura başlığı için satış temsilcisi ve kur çekiliyor (5000'erlik batch)...")
                                
                                invoice_user_map = {}
                                invoice_datetime_map = {}  # Fatura kesilme zamanı (saat için)
                                invoice_date_map = {}  # Gerçek fatura tarihi
                                move_type_map = {}  # Fatura tipi (iade kontrolü için)
                                invoice_currency_rate_map = {}  # Fatura kuru (USD hesabı için)
                                
                                try:
                                    for i in range(0, len(move_ids), 5000):
                                        batch_ids = move_ids[i:i+5000]
                                        print(f"   📦 Fatura batch {i//5000 + 1}: {len(batch_ids)} fatura...")
                                        batch_moves = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'account.move', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'invoice_user_id', 'user_id', 'create_date', 'invoice_date', 'move_type', 'currency_rate', 'amount_total', 'amount_total_signed']}
                                        )
                                        for move in batch_moves:
                                            move_id = move['id']
                                            
                                            # Satış temsilcisi
                                            if move.get('invoice_user_id') and isinstance(move.get('invoice_user_id'), list):
                                                invoice_user_map[move_id] = move['invoice_user_id'][1]
                                            elif move.get('user_id') and isinstance(move.get('user_id'), list):
                                                invoice_user_map[move_id] = move['user_id'][1]
                                            else:
                                                invoice_user_map[move_id] = 'Sistem'
                                            
                                            # Fatura kesilme zamanı (tarih + saat)
                                            if move.get('create_date'):
                                                invoice_datetime_map[move_id] = move['create_date']
                                            
                                            # Gerçek fatura tarihi
                                            if move.get('invoice_date'):
                                                invoice_date_map[move_id] = move['invoice_date']
                                            
                                            # Fatura tipi (iade kontrolü için)
                                            if move.get('move_type'):
                                                move_type_map[move_id] = move['move_type']
                                            
                                            # KUR bilgisi (USD hesabı için)
                                            if move.get('currency_rate'):
                                                invoice_currency_rate_map[move_id] = float(move['currency_rate'])
                                    
                                    print(f"✅ {len(invoice_user_map)} fatura için satış temsilcisi eşleştirildi!")
                                    print(f"✅ {len(invoice_datetime_map)} fatura için tarih-saat bilgisi alındı!")
                                    print(f"✅ {len(invoice_date_map)} fatura için gerçek tarih alındı!")
                                    print(f"✅ {len(move_type_map)} fatura için tip bilgisi alındı!")
                                    print(f"✅ {len(invoice_currency_rate_map)} fatura için KUR bilgisi alındı!")
                                except Exception as e:
                                    print(f"⚠️ Satış temsilcisi + tarih çekme hatası: {e}")
                                    invoice_user_map = {}
                                    invoice_datetime_map = {}
                                    invoice_date_map = {}
                                
                            except Exception as e:
                                print(f"❌ XML-RPC veri çekme hatası: {e}")
                                all_data = None
                        else:
                            all_data = None
                        
                        if all_data and len(all_data) > 0:
                            
                            # Verileri işle ve JSON oluştur
                            print("\n2️⃣ Veriler işleniyor ve kategorilere ayrılıyor...")
                            
                            processed_data = {
                                'categories': {},
                                'products': {},
                                'partners': {},
                                'sales_persons': {},
                                'cities': {},
                                'stores': {},  # Mağaza bilgisi (analytic_account)
                                'years': {},
                                'months': {},
                                'raw_count': len(all_data),
                                'last_update': datetime.now().isoformat()
                            }
                            
                            # Önce ürün kategorilerini ve partner şehirlerini çek (XML-RPC)
                            print("📦 Ürün kategorileri çekiliyor (Hiyerarşik - XML-RPC)...")
                            
                            product_ids = list(set([line.get('product_id')[0] for line in all_data if line.get('product_id') and isinstance(line.get('product_id'), list)]))
                            partner_ids = list(set([line.get('partner_id')[0] for line in all_data if line.get('partner_id') and isinstance(line.get('partner_id'), list)]))
                            
                            product_categ_map = {}
                            product_brand_map = {}
                            category_hierarchy = {}
                            partner_city_map = {}
                            partner_tags_map = {}
                            
                            if product_ids and models:  # TÜM ÜRÜNLER
                                try:
                                    # Ürünleri BATCH çek - TÜM ÜRÜNLER (kategori + marka)
                                    print(f"📦 {len(product_ids)} ürün çekiliyor (5000'erlik batch)...")
                                    products = []
                                    for i in range(0, len(product_ids), 5000):
                                        batch_ids = product_ids[i:i+5000]
                                        print(f"   📦 Ürün batch {i//5000 + 1}: {len(batch_ids)} ürün...")
                                        batch_products = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'product.product', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'categ_id', 'product_brand_id', 'product_tmpl_id']}
                                        )
                                        products.extend(batch_products)
                                    print(f"✅ Toplam {len(products)} ürün çekildi!")
                                    
                                    # Kategori ID'lerini topla
                                    categ_ids = list(set([prod['categ_id'][0] for prod in products if prod.get('categ_id') and isinstance(prod.get('categ_id'), list)]))
                                    
                                    # Tüm kategorileri çek (parent bilgisiyle)
                                    print(f"📂 {len(categ_ids)} kategori detayı çekiliyor...")
                                    categories = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'product.category', 'search_read',
                                        [[('id', 'in', categ_ids)]],
                                        {'fields': ['id', 'name', 'parent_id', 'complete_name']}
                                    )
                                    
                                    # Kategori hiyerarşisini oluştur (5 seviyeye kadar)
                                    for cat in categories:
                                        cat_id = cat['id']
                                        cat_name = cat.get('complete_name') or cat.get('name')
                                        parent_name = cat['parent_id'][1] if cat.get('parent_id') and isinstance(cat.get('parent_id'), list) else None
                                        
                                        # Kategori yolunu parçala (örn: "Müzik / Gitarlar / Elektro" -> ["Müzik", "Gitarlar", "Elektro"])
                                        cat_levels = cat_name.split(' / ') if ' / ' in cat_name else [cat_name]
                                        
                                        category_hierarchy[cat_id] = {
                                            'name': cat_name,
                                            'parent': parent_name,
                                            'full_path': cat_name,
                                            'level1': cat_levels[0] if len(cat_levels) > 0 else '',
                                            'level2': cat_levels[1] if len(cat_levels) > 1 else '',
                                            'level3': cat_levels[2] if len(cat_levels) > 2 else '',
                                            'level4': cat_levels[3] if len(cat_levels) > 3 else '',
                                            'level5': cat_levels[4] if len(cat_levels) > 4 else ''
                                        }
                                    
                                    # Ürün-kategori ve marka eşleştirmesi
                                    product_brand_map = {}
                                    for prod in products:
                                        prod_id = prod['id']
                                        
                                        # Kategori
                                        categ = prod.get('categ_id')
                                        if categ and isinstance(categ, list) and len(categ) > 0:
                                            cat_id = categ[0]
                                            if cat_id in category_hierarchy:
                                                product_categ_map[prod_id] = category_hierarchy[cat_id]['full_path']
                                            else:
                                                product_categ_map[prod_id] = categ[1] if len(categ) > 1 else 'Diğer'
                                        else:
                                            product_categ_map[prod_id] = 'Diğer'
                                        
                                        # Marka
                                        brand = None
                                        if prod.get('product_brand_id') and isinstance(prod.get('product_brand_id'), list):
                                            brand = prod['product_brand_id'][1]
                                        
                                        product_brand_map[prod_id] = brand if brand else 'Bilinmeyen'
                                    
                                    print(f"✅ {len(product_categ_map)} ürün kategorisi eşleştirildi (XML-RPC)")
                                    print(f"✅ {len(product_brand_map)} ürün markası eşleştirildi")
                                    print(f"✅ {len(category_hierarchy)} kategori hiyerarşisi oluşturuldu (5 seviye)!")
                                    
                                    # Kategori hiyerarşisini data'ya ekle
                                    processed_data['category_hierarchy'] = category_hierarchy
                                    
                                except Exception as e:
                                    print(f"⚠️ Ürün kategorisi çekme hatası: {e}")
                                    category_hierarchy = {}
                                    product_brand_map = {}
                            
                            # Partner şehir bilgilerini çek (XML-RPC) - HİBRİT YÖNTEM (state_id dahil) - TÜM PARTNER
                            print(f"\n🏙️ Partner şehir bilgileri çekiliyor (TÜM PARTNER: {len(partner_ids)})...")
                            if partner_ids and models:
                                try:
                                    # Partnerleri BATCH çek (5000'erlik)
                                    print(f"📦 {len(partner_ids)} partner çekiliyor (5000'erlik batch)...")
                                    partners = []
                                    for i in range(0, len(partner_ids), 5000):
                                        batch_ids = partner_ids[i:i+5000]
                                        print(f"   📦 Partner batch {i//5000 + 1}: {len(batch_ids)} partner...")
                                        batch_partners = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'res.partner', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'name', 'city', 'state_id']}
                                        )
                                        partners.extend(batch_partners)
                                    print(f"✅ Toplam {len(partners)} partner çekildi!")
                                    
                                    # Şehir listesi (partner adından çıkarmak için)
                                    city_keywords = [
                                        'İstanbul', 'Ankara', 'İzmir', 'Antalya', 'Bursa', 'Adana', 
                                        'Konya', 'Gaziantep', 'Şanlıurfa', 'Kocaeli', 'Mersin', 
                                        'Diyarbakır', 'Hatay', 'Manisa', 'Kayseri', 'Samsun',
                                        'Balıkesir', 'Kahramanmaraş', 'Van', 'Aydın', 'Denizli',
                                        'Sakarya', 'Tekirdağ', 'Muğla', 'Eskişehir', 'Mardin',
                                        'Malatya', 'Erzurum', 'Trabzon', 'Elazığ', 'Ordu',
                                        'Çorum', 'Afyonkarahisar', 'Sivas', 'Tokat', 'Giresun',
                                        'Aksaray', 'Niğde', 'Nevşehir', 'Kırıkkale', 'Kırşehir',
                                        'Bodrum', 'Tünel', 'Hilltown', 'Uniq', 'Akasya', 'Kanyon',
                                        'Zorlu', 'Emaar', 'Marmara', 'Optimum', 'Capacity', 'Forum',
                                        'Cevahir', 'Metropol', 'Palladium', 'Galleria', 'Mall of'
                                    ]
                                    
                                    for partner in partners:
                                        partner_id = partner['id']
                                        partner_name = partner.get('name', '')
                                        city_field = partner.get('city', '').strip()
                                        state_field = partner.get('state_id')
                                        
                                        # 1. Önce state_id'den (İl/Bölge bilgisi - en doğru)
                                        if state_field and isinstance(state_field, list) and len(state_field) > 1:
                                            partner_city_map[partner_id] = state_field[1]  # [id, name]
                                        # 2. Sonra city alanından
                                        elif city_field and city_field != '':
                                            partner_city_map[partner_id] = city_field
                                        else:
                                            # 3. Partner adından şehir çıkar
                                            found_city = None
                                            for city in city_keywords:
                                                if city.lower() in partner_name.lower():
                                                    found_city = city
                                                    break
                                            
                                            partner_city_map[partner_id] = found_city if found_city else 'Bilinmeyen'
                                    
                                    # İstatistik
                                    with_city = sum(1 for c in partner_city_map.values() if c != 'Bilinmeyen')
                                    print(f"✅ {len(partner_city_map)} partner işlendi!")
                                    print(f"   📍 Şehir bilgisi olan: {with_city}")
                                    print(f"   ❓ Bilinmeyen şehir: {len(partner_city_map) - with_city}")
                                    
                                except Exception as e:
                                    print(f"⚠️ Partner şehir bilgisi çekme hatası: {e}")
                                    partner_city_map = {}
                                    partner_tags_map = {}
                            
                            # Detay kayıtları için liste
                            details = []
                            
                            # İade faturaları istatistikleri
                            refund_count = 0
                            refund_total_usd = 0
                            invoice_count = 0
                            invoice_total_usd = 0
                            
                            # İşleme sayacı (debug için)
                            processed_count = 0
                            
                            for line in all_data:
                                try:
                                    processed_count += 1
                                    
                                    # ÖNCE move bilgisini al
                                    move = line.get('move_id')
                                    move_id = move[0] if isinstance(move, list) else 0
                                    move_name = move[1] if isinstance(move, list) and len(move) > 1 else ''
                                    
                                    # İADE KONTROLÜ: 
                                    # Format: RMRKZ/2024/00053 (EFT2024000000163)
                                    # İADE FATURALARI DAİMA "R" ile başlar!
                                    is_refund = False
                                    if move_name and move_name.upper().startswith('R'):
                                        is_refund = True
                                    
                                    # Ek kontrol: move_type de kontrol et (çift güvenlik)
                                    move_type = move_type_map.get(move_id, '')
                                    if move_type == 'out_refund':
                                        is_refund = True
                                    
                                    # DEBUG: İlk 20 kaydı logla
                                    if processed_count <= 20:
                                        print(f"📝 Kayıt #{processed_count}: move_name={move_name}, is_refund={is_refund}, move_type={move_type}")
                                    
                                    # DORUK TEKİN için ERKEN DEBUG (partner bilgisi alınmadan önce)
                                    partner = line.get('partner_id')
                                    partner_name_early = partner[1] if isinstance(partner, list) and len(partner) > 1 else ''
                                    if 'DORUK' in partner_name_early.upper():
                                        print(f"🔍 ERKEN DORUK: move_name={move_name}, is_refund={is_refund}, move_type={move_type}")
                                    
                                    # Tarih - GERÇEK FATURA TARİHİ
                                    # account.move'dan invoice_date, yoksa account.move.line'dan date
                                    date_str = invoice_date_map.get(move_id) or line.get('date', '')
                                    if date_str:
                                        year = date_str[:4]
                                        month = date_str[:7]
                                    else:
                                        year = 'Bilinmeyen'
                                        month = 'Bilinmeyen'
                                    
                                    # Saat bilgisi - account.move'dan create_date (FATURA KESİLME ZAMANI)
                                    create_hour = 0
                                    create_day_of_week = 0
                                    
                                    create_date_str = invoice_datetime_map.get(move_id, '')
                                    if create_date_str:
                                        try:
                                            # Format: '2025-10-15 14:35:22'
                                            from datetime import datetime
                                            dt = datetime.strptime(create_date_str, '%Y-%m-%d %H:%M:%S')
                                            create_hour = dt.hour
                                            create_day_of_week = dt.weekday()  # 0=Pazartesi, 6=Pazar
                                        except:
                                            pass
                                    
                                    # Ürün
                                    product = line.get('product_id')
                                    product_id = product[0] if isinstance(product, list) else 0
                                    
                                    # Kategori (ürün map'inden)
                                    categ_name = product_categ_map.get(product_id, 'Diğer')
                                    
                                    # Ürün
                                    product = line.get('product_id')
                                    product_name = product[1] if isinstance(product, list) and len(product) > 1 else 'Bilinmeyen'
                                    product_id = product[0] if isinstance(product, list) else 0
                                    
                                    # Müşteri/Mağaza
                                    partner = line.get('partner_id')
                                    partner_name = partner[1] if isinstance(partner, list) and len(partner) > 1 else 'Bilinmeyen'
                                    partner_id = partner[0] if isinstance(partner, list) else 0
                                    
                                    # Şehir - account.invoice.report'tan state_id_map'den çek (HİBRİT YÖNTEM)
                                    line_id = line.get('id')
                                    city = state_id_map.get(line_id, 'Bilinmeyen') if state_id_map else partner_city_map.get(partner_id, 'Bilinmeyen')
                                    
                                    # Mağaza - analytic_account_id'den
                                    analytic_account = line.get('analytic_account_id')
                                    store_name = analytic_account[1] if isinstance(analytic_account, list) and len(analytic_account) > 1 else 'Genel'
                                    
                                    # Satış temsilcisi - invoice_user_map'ten al
                                    move_id_value = line.get('move_id')
                                    move_id_int = move_id_value[0] if isinstance(move_id_value, list) else 0
                                    user_name = invoice_user_map.get(move_id_int, 'Sistem')
                                    
                                    # Sayısal değerler - SADECE USD VE MİKTAR
                                    qty = float(line.get('quantity', 0))
                                    
                                    # USD tutar - HİBRİT YÖNTEM (3 Katmanlı Fallback)
                                    line_id = line.get('id')
                                    price_subtotal = abs(float(line.get('price_subtotal', 0)))  # TL tutar (mutlak değer)
                                    
                                    # 1. ÖNCELİK: account.invoice.report'tan usd_rate ve USD tutarı kullan
                                    if line_id in usd_rate_map and usd_rate_map[line_id] > 0:
                                        # Satır bazında kur varsa kullan (en doğru!)
                                        usd_rate = usd_rate_map[line_id]
                                        usd_amount = price_subtotal / usd_rate
                                    elif line_id in usd_amount_map and usd_amount_map[line_id] != 0:
                                        # Doğrudan USD tutarı varsa kullan
                                        usd_amount = abs(usd_amount_map[line_id])
                                    # 2. FALLBACK: account.move'dan fatura kuru
                                    elif move_id in invoice_currency_rate_map and invoice_currency_rate_map[move_id] > 0:
                                        currency_rate = invoice_currency_rate_map[move_id]
                                        usd_amount = price_subtotal / currency_rate
                                    # 3. SON ÇARE: Currency kontrolü
                                    else:
                                        currency = line.get('currency_id')
                                        currency_code = currency[1] if isinstance(currency, list) and len(currency) > 1 else ''
                                        
                                        if 'USD' in currency_code.upper():
                                            usd_amount = price_subtotal
                                        else:
                                            # Son çare: ortalama kur
                                            usd_amount = price_subtotal / 34.5
                                    
                                    # HER ZAMAN POZİTİF OLARAK AL (move_type'a göre sonra işaret belirleyeceğiz)
                                    usd_amount = abs(usd_amount)
                                    qty = abs(qty)
                                    
                                    # İADE FATURALARI İÇİN İŞARET KONTROLÜ
                                    if is_refund:
                                        # DEBUG: İlk 10 out_refund kaydını logla (işaret değiştirmeden ÖNCE)
                                        if refund_count < 10:
                                            print(f"🔍 İADE #{refund_count + 1} ÖNCE: move={move_name}, move_type={move_type}, qty={qty}, usd={usd_amount:.2f}, partner={partner_name[:40]}")
                                        
                                        # İstatistik
                                        refund_count += 1
                                        refund_total_usd += abs(usd_amount)
                                        
                                        # KRİTİK: İADE FATURALARI HER ZAMAN NEGATİF OLMALI!
                                        # Yukarıda abs() aldık, şimdi negatif yap
                                        usd_amount_before = usd_amount
                                        qty_before = qty
                                        usd_amount = -abs(usd_amount)
                                        qty = -abs(qty)
                                        
                                        # DEBUG: İşaret değiştirdikten SONRA
                                        if refund_count <= 10:
                                            print(f"🔍 İADE #{refund_count} SONRA: qty={qty_before:.1f} → {qty:.1f}, usd={usd_amount_before:.2f} → {usd_amount:.2f}")
                                    else:
                                        # Normal satış faturaları için istatistik
                                        invoice_count += 1
                                        invoice_total_usd += usd_amount
                                    
                                    # Kategori bazlı toplama - SADECE USD VE MİKTAR
                                    if categ_name not in processed_data['categories']:
                                        processed_data['categories'][categ_name] = {
                                            'quantity': 0, 'usd_amount': 0, 'years': {}
                                        }
                                    
                                    processed_data['categories'][categ_name]['quantity'] += qty
                                    processed_data['categories'][categ_name]['usd_amount'] += usd_amount
                                    
                                    if year not in processed_data['categories'][categ_name]['years']:
                                        processed_data['categories'][categ_name]['years'][year] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['categories'][categ_name]['years'][year]['quantity'] += qty
                                    processed_data['categories'][categ_name]['years'][year]['usd_amount'] += usd_amount
                                    
                                    # Ürün bazlı - SADECE USD VE MİKTAR + MARKA + KATEGORİ SEVİYELERİ
                                    if product_id not in processed_data['products']:
                                        # Kategori seviyelerini al
                                        cat_hierarchy = category_hierarchy.get(
                                            [k for k, v in product_categ_map.items() if k == product_id][0] if product_id in product_categ_map else None
                                        ) if product_id in product_categ_map else {}
                                        
                                        # Daha basit yöntem: product_id'den kategori bilgisini al
                                        cat_info = {}
                                        for cat_id, cat_data in category_hierarchy.items():
                                            if product_categ_map.get(product_id) == cat_data.get('full_path'):
                                                cat_info = cat_data
                                                break
                                        
                                        processed_data['products'][product_id] = {
                                            'name': product_name,
                                            'category': categ_name,
                                            'brand': product_brand_map.get(product_id, 'Bilinmeyen'),
                                            'category_level1': cat_info.get('level1', ''),
                                            'category_level2': cat_info.get('level2', ''),
                                            'category_level3': cat_info.get('level3', ''),
                                            'category_level4': cat_info.get('level4', ''),
                                            'category_level5': cat_info.get('level5', ''),
                                            'quantity': 0,
                                            'usd_amount': 0
                                        }
                                    
                                    processed_data['products'][product_id]['quantity'] += qty
                                    processed_data['products'][product_id]['usd_amount'] += usd_amount
                                    
                                    # Müşteri/Mağaza bazlı - SADECE USD VE MİKTAR + ŞEHİR + ETİKETLER
                                    if partner_id not in processed_data['partners']:
                                        processed_data['partners'][partner_id] = {
                                            'name': partner_name,
                                            'city': city,
                                            'quantity': 0,
                                            'usd_amount': 0
                                        }
                                    
                                    processed_data['partners'][partner_id]['quantity'] += qty
                                    processed_data['partners'][partner_id]['usd_amount'] += usd_amount
                                    
                                    # DEBUG: DORUK TEKİN için özel log (TOPLAMA SONRASI)
                                    if 'DORUK' in partner_name.upper():
                                        print(f"💎 DORUK SONUÇ: partner={partner_name}, move={move_name}, is_refund={is_refund}, move_type={move_type}, qty={qty}, usd={usd_amount:.2f}, yeni_toplam_qty={processed_data['partners'][partner_id]['quantity']}, yeni_toplam_usd={processed_data['partners'][partner_id]['usd_amount']:.2f}")
                                    
                                    # Satış Temsilcisi bazlı - SADECE USD VE MİKTAR
                                    if user_name not in processed_data['sales_persons']:
                                        processed_data['sales_persons'][user_name] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['sales_persons'][user_name]['quantity'] += qty
                                    processed_data['sales_persons'][user_name]['usd_amount'] += usd_amount
                                    
                                    # Şehir bazlı - SADECE USD VE MİKTAR
                                    if city not in processed_data['cities']:
                                        processed_data['cities'][city] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['cities'][city]['quantity'] += qty
                                    processed_data['cities'][city]['usd_amount'] += usd_amount
                                    
                                    # Mağaza bazlı - SADECE USD VE MİKTAR
                                    if store_name not in processed_data['stores']:
                                        processed_data['stores'][store_name] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['stores'][store_name]['quantity'] += qty
                                    processed_data['stores'][store_name]['usd_amount'] += usd_amount
                                    
                                    # Yıl bazlı - SADECE USD VE MİKTAR
                                    if year not in processed_data['years']:
                                        processed_data['years'][year] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['years'][year]['quantity'] += qty
                                    processed_data['years'][year]['usd_amount'] += usd_amount
                                    
                                    # Ay bazlı - SADECE USD VE MİKTAR
                                    if month not in processed_data['months']:
                                        processed_data['months'][month] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['months'][month]['quantity'] += qty
                                    processed_data['months'][month]['usd_amount'] += usd_amount
                                    
                                    # Detay kaydı ekle - AMA İADE FATURALARINI EKLEME (sayfada gösterme)
                                    if not is_refund:
                                        cat_info = {}
                                        for cat_id, cat_data in category_hierarchy.items():
                                            if product_categ_map.get(product_id) == cat_data.get('full_path'):
                                                cat_info = cat_data
                                                break
                                        
                                        details.append({
                                            'date': date_str,
                                            'create_hour': create_hour,
                                            'day_of_week': create_day_of_week,
                                            'partner': partner_name,
                                            'product': product_name,
                                            'brand': product_brand_map.get(product_id, 'Bilinmeyen'),
                                            'category_1': cat_info.get('level1', ''),
                                            'category_2': cat_info.get('level2', ''),
                                            'category_3': cat_info.get('level3', ''),
                                            'category_4': cat_info.get('level4', ''),
                                            'sales_person': user_name,
                                            'store': store_name,
                                            'city': city,
                                            'quantity': qty,
                                            'usd_amount': usd_amount
                                        })
                                    
                                except Exception as e:
                                    print(f"⚠️ Satır işleme hatası: {e}")
                                    continue
                            
                            print("\n✅ Veri işleme tamamlandı!")
                            print(f"📦 Kategori sayısı: {len(processed_data['categories'])}")
                            print(f"🏷️ Ürün sayısı: {len(processed_data['products'])}")
                            print(f"🤝 Müşteri sayısı: {len(processed_data['partners'])}")
                            print(f"📋 Detay kayıt sayısı: {len(details)}")
                            print(f"👤 Satış Temsilcisi sayısı: {len(processed_data['sales_persons'])}")
                            print(f"🏙️ Şehir sayısı: {len(processed_data['cities'])}")
                            print(f"📅 Yıl sayısı: {len(processed_data['years'])}")
                            print(f"📆 Ay sayısı: {len(processed_data['months'])}")
                            print(f"\n💰 FATURA İSTATİSTİKLERİ:")
                            print(f"   ✅ Satış Faturaları (out_invoice): {invoice_count} adet, ${invoice_total_usd:,.2f}")
                            print(f"   ❌ İade Faturaları (out_refund): {refund_count} adet, ${refund_total_usd:,.2f}")
                            print(f"   📊 NET TOPLAM: ${invoice_total_usd - refund_total_usd:,.2f}")
                            
                            # RES.PARTNER (Müşteri) Detaylı Bilgileri Çek (XML-RPC) - TÜM MÜŞTERİLER
                            print("\n4️⃣ Müşteri detay bilgileri çekiliyor (res.partner - XML-RPC)...")
                            
                            partner_ids = list(processed_data['partners'].keys())  # TÜM MÜŞTERİLER
                            print(f"👥 Toplam {len(partner_ids)} müşteri detayı çekilecek...")
                            
                            if partner_ids and models:
                                try:
                                    partners = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'res.partner', 'search_read',
                                        [[('id', 'in', partner_ids)]],
                                        {
                                            'fields': [
                                                'id', 'name', 'email', 'phone', 'mobile',
                                                'street', 'city', 'state_id', 'country_id',
                                                'customer_rank', 'supplier_rank', 'company_type',
                                                'vat', 'category_id', 'user_id', 'create_date'
                                            ]
                                        }
                                    )
                                    
                                    partner_details = {}
                                    
                                    for partner in partners:
                                        partner_id = partner.get('id')
                                        
                                        state = partner.get('state_id')
                                        state_name = state[1] if isinstance(state, list) and len(state) > 1 else ''
                                        
                                        country = partner.get('country_id')
                                        country_name = country[1] if isinstance(country, list) and len(country) > 1 else ''
                                        
                                        categories = partner.get('category_id', [])
                                        category_names = [cat[1] for cat in categories if isinstance(cat, list) and len(cat) > 1] if categories else []
                                        
                                        user = partner.get('user_id')
                                        user_name = user[1] if isinstance(user, list) and len(user) > 1 else ''
                                        
                                        partner_details[partner_id] = {
                                            'name': partner.get('name', ''),
                                            'email': partner.get('email', ''),
                                            'phone': partner.get('phone', ''),
                                            'mobile': partner.get('mobile', ''),
                                            'street': partner.get('street', ''),
                                            'city': partner.get('city', ''),
                                            'state': state_name,
                                            'country': country_name,
                                            'customer_rank': partner.get('customer_rank', 0),
                                            'supplier_rank': partner.get('supplier_rank', 0),
                                            'company_type': partner.get('company_type', ''),
                                            'vat': partner.get('vat', ''),
                                            'categories': category_names,
                                            'sales_person': user_name,
                                            'create_date': partner.get('create_date', ''),
                                            'sales_data': processed_data['partners'].get(partner_id, {})
                                        }
                                    
                                    processed_data['partner_details'] = partner_details
                                    
                                    print(f"✅ {len(partner_details)} müşteri detayı çekildi (XML-RPC)!")
                                    print(f"📧 Email olan: {sum(1 for p in partner_details.values() if p['email'])}")
                                    print(f"📱 Telefon olan: {sum(1 for p in partner_details.values() if p['phone'] or p['mobile'])}")
                                    print(f"🏙️ Şehir bilgisi olan: {sum(1 for p in partner_details.values() if p['city'])}")
                                    
                                except Exception as e:
                                    print(f"⚠️ Müşteri detayları çekme hatası: {e}")
                                    processed_data['partner_details'] = {}
                            else:
                                print("⚠️ Müşteri ID'leri yok veya XML-RPC bağlantısı yok")
                                processed_data['partner_details'] = {}
                            
                            # Detayları processed_data'ya ekle
                            processed_data['details'] = details
                            
                            # JSON dosyaları oluştur (YILLARA BÖLÜNMÜŞ + GZIP)
                            print("\n5️⃣ JSON dosyaları oluşturuluyor (yıllara bölünmüş + sıkıştırılmış)...")
                            
                            import gzip
                            from collections import defaultdict
                            
                            # Verileri yıllara göre ayır
                            data_by_year = defaultdict(list)
                            for record in details:
                                year = record['date'][:4] if record.get('date') else '2025'
                                data_by_year[year].append(record)
                            
                            print(f"📊 Veriler {len(data_by_year)} yıla bölündü:")
                            for year in sorted(data_by_year.keys()):
                                print(f"   - {year}: {len(data_by_year[year])} kayıt")
                            
                            # Her yıl için ayrı sıkıştırılmış dosya oluştur
                            created_files = []
                            for year in sorted(data_by_year.keys()):
                                year_data = {
                                    'year': year,
                                    'categories': processed_data['categories'],
                                    'products': processed_data['products'],
                                    'partners': processed_data['partners'],
                                    'partner_details': processed_data['partner_details'],
                                    'sales_persons': processed_data['sales_persons'],
                                    'stores': processed_data['stores'],
                                    'years': processed_data['years'],
                                    'months': processed_data['months'],
                                    'details': data_by_year[year]
                                }
                                
                                filename = f'data-{year}.json.gz'
                                with gzip.open(filename, 'wt', encoding='utf-8') as f:
                                    json.dump(year_data, f, ensure_ascii=False)
                                
                                # Dosya boyutunu kontrol et
                                import os
                                file_size_mb = os.path.getsize(filename) / (1024 * 1024)
                                print(f"   ✅ {filename}: {file_size_mb:.2f} MB")
                                created_files.append(filename)
                            
                            # Metadata dosyası oluştur (hangi yıllar var?)
                            metadata = {
                                'years': sorted(data_by_year.keys()),
                                'total_records': len(details),
                                'files': created_files,
                                'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                            }
                            
                            with open('data-metadata.json', 'w', encoding='utf-8') as f:
                                json.dump(metadata, f, ensure_ascii=False, indent=2)
                            
                            print(f"✅ {len(created_files)} dosya oluşturuldu!")
                            print(f"✅ data-metadata.json oluşturuldu!")
                            
                            print("\n" + "=" * 60)
                            print("🎉 TÜM VERİLER BAŞARIYLA ÇEKİLDİ VE İŞLENDİ!")
                            print("=" * 60)
                            
                        else:
                            print(f"❌ Fatura verileri çekilemedi!")
                            print(f"Yanıt: {all_data if 'all_data' in locals() else 'Veri yok'}")
                            exit(1)
                        
                    else:
                        print("❌ UID bulunamadı!")
                        print(f"Session: {session_info}")
                        exit(1)
                else:
                    print("❌ Geçersiz session!")
                    print(f"Result: {result}")
                    exit(1)
            else:
                print("❌ Beklenmeyen yanıt!")
                print(f"Response: {result}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Hata: {e}")
            import traceback
            traceback.print_exc()
            exit(1)
        
        EOF
    
    - name: Dosya Boyutlarını Kontrol Et
      run: |
        echo "📊 Oluşturulan dosyalar:"
        ls -lh data-*.json.gz data-metadata.json 2>/dev/null || echo "⚠️ Dosyalar bulunamadı"
        
        echo ""
        echo "📊 Dosya boyutları:"
        for file in data-*.json.gz; do
          if [ -f "$file" ]; then
            SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
            SIZE_MB=$((SIZE / 1024 / 1024))
            echo "   - $file: ${SIZE_MB} MB"
            
            if [ $SIZE_MB -gt 100 ]; then
              echo "   ⚠️ UYARI: $file 100 MB'dan büyük!"
            fi
          fi
        done
    
    - name: Değişiklikleri commit et ve yükle
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Eski data.json varsa sil (artık kullanmıyoruz)
        if [[ -f "data.json" ]]; then
          echo "🗑️ Eski data.json siliniyor..."
          git rm -f data.json 2>/dev/null || rm -f data.json
        fi
        
        # Yeni dosyaları kontrol et
        if ls data-*.json.gz 1> /dev/null 2>&1; then
          echo "✅ Yıllara bölünmüş dosyalar bulundu"
          
          # Önce remote değişiklikleri çek
          echo "🔄 Remote değişiklikler kontrol ediliyor..."
          git fetch origin
          
          # Pull yap
          if git pull --rebase origin main; then
            echo "✅ Rebase başarılı"
          elif git pull origin main; then
            echo "✅ Merge başarılı"
          else
            echo "⚠️ Pull başarısız, devam ediliyor..."
          fi
          
          # Tüm data dosyalarını ekle
          git add data-*.json.gz data-metadata.json
          
          if [[ -n $(git status -s) ]]; then
            git commit -m "Veriler güncellendi - $(date +'%Y-%m-%d %H:%M')"
            
            # Push URL'ini PAT ile güncelle
            git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/toftamars/satiss-dashboard.git
            
            # Push dene, başarısız olursa force push
            if git push origin main; then
              echo "✅ Değişiklikler GitHub'a yüklendi!"
            else
              echo "⚠️ Normal push başarısız, pull yapıp tekrar deneniyor..."
              git pull --rebase origin main
              git push origin main
              echo "✅ Değişiklikler GitHub'a yüklendi (rebase sonrası)!"
            fi
          else
            echo "ℹ️ Değişiklik yok"
          fi
        else
          echo "⚠️ data.json dosyası bulunamadı"
        fi
