name: Odoo Veri G√ºncelleme

on:
  schedule:
    - cron: '0 23 * * *'
  workflow_dispatch:

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT_TOKEN }}
        persist-credentials: true
    
    - name: Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Gerekli k√ºt√ºphaneleri kur
      run: |
        pip install requests
    
    - name: Odoo'dan veri √ßek
      env:
        ODOO_URL: ${{ secrets.ODOO_URL }}
        ODOO_USERNAME: ${{ secrets.ODOO_USERNAME }}
        ODOO_API_KEY: ${{ secrets.ODOO_API_KEY }}
      run: |
        python3 << 'EOF'
        import os
        import requests
        import json
        from datetime import datetime
        import warnings
        import xmlrpc.client
        import ssl
        
        warnings.filterwarnings('ignore')
        ssl._create_default_https_context = ssl._create_unverified_context
        
        print("=" * 60)
        print("üöÄ Odoo 15 API Test - Yeni Kullanƒ±cƒ±")
        print("=" * 60)
        
        url = os.environ['ODOO_URL']
        username = os.environ['ODOO_USERNAME']
        password = os.environ['ODOO_API_KEY']
        db = "erp.zuhalmuzik.com"
        
        print(f"üîå URL: {url}")
        print(f"üóÑÔ∏è Database: {db}")
        print(f"üë§ Username: {username}")
        print(f"üîê Password: {'*' * len(password)}")
        
        try:
            session = requests.Session()
            
            # Odoo 15 authenticate
            auth_url = f"{url}/web/session/authenticate"
            
            auth_payload = {
                "jsonrpc": "2.0",
                "method": "call",
                "params": {
                    "db": db,
                    "login": username,
                    "password": password
                },
                "id": 1
            }
            
            print("\nüîê Kimlik doƒürulama yapƒ±lƒ±yor...")
            
            response = session.post(
                auth_url,
                json=auth_payload,
                headers={"Content-Type": "application/json"},
                verify=False,
                timeout=30
            )
            
            print(f"üì° HTTP Status: {response.status_code}")
            
            if response.status_code != 200:
                print(f"‚ùå HTTP Hatasƒ±: {response.status_code}")
                print(f"Response: {response.text[:500]}")
                exit(1)
            
            result = response.json()
            
            # Hata kontrol√º
            if 'error' in result:
                error_data = result['error'].get('data', {})
                error_msg = error_data.get('message', result['error'].get('message', 'Bilinmeyen'))
                error_name = error_data.get('name', 'Bilinmeyen')
                
                print(f"‚ùå Odoo Hatasƒ±: {error_name}")
                print(f"üìù Mesaj: {error_msg}")
                
                # Detaylƒ± debug
                if 'debug' in error_data:
                    debug = error_data['debug']
                    if 'database' in debug.lower():
                        print("\nüí° VERƒ∞TABANI HATASI TESPƒ∞T EDƒ∞LDƒ∞!")
                        print("Denenen DB:", db)
                    elif 'access denied' in debug.lower() or 'credentials' in debug.lower():
                        print("\nüí° KULLANICI ADI/≈ûƒ∞FRE HATASI!")
                        print("Username kontrol edin:", username)
                    elif '2fa' in debug.lower() or 'two factor' in debug.lower():
                        print("\nüí° 2FA SORUNU!")
                        print("Kullanƒ±cƒ±da 2FA kapalƒ± mƒ± kontrol edin")
                
                exit(1)
            
            # Ba≈üarƒ±lƒ± giri≈ü
            if 'result' in result:
                session_info = result['result']
                
                if session_info and isinstance(session_info, dict):
                    uid = session_info.get('uid')
                    
                    if uid:
                        print("\n" + "=" * 60)
                        print("‚úÖ BA≈ûARILI! ODOO'YA BAƒûLANILDI!")
                        print("=" * 60)
                        print(f"üë§ User ID: {uid}")
                        print(f"üë§ ƒ∞sim: {session_info.get('name', 'N/A')}")
                        print(f"üè¢ ≈ûirket: {session_info.get('company_name', 'N/A')}")
                        print(f"üóÑÔ∏è Ger√ßek DB: {session_info.get('db', 'N/A')}")
                        print(f"üåç User Context: {session_info.get('user_context', {})}")
                        
                        # Veri √ßekme testi
                        print("\n" + "=" * 60)
                        print("üéâ Gƒ∞Rƒ∞≈û BA≈ûARILI! XML-RPC ƒ∞LE VERƒ∞ √áEKMEYE GE√áƒ∞YORUZ")
                        print("=" * 60)
                        
                        # XML-RPC ile devam et (daha stabil)
                        print("\nüîÑ XML-RPC baƒülantƒ±sƒ± kuruluyor...")
                        
                        try:
                            common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
                            models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
                            
                            # Tekrar authenticate (XML-RPC i√ßin)
                            uid_xmlrpc = common.authenticate(db, username, password, {})
                            
                            if not uid_xmlrpc:
                                print("‚ùå XML-RPC authentication ba≈üarƒ±sƒ±z!")
                                exit(1)
                            
                            print(f"‚úÖ XML-RPC baƒülantƒ±sƒ± ba≈üarƒ±lƒ±! (UID: {uid_xmlrpc})")
                        except Exception as e:
                            print(f"‚ùå XML-RPC hatasƒ±: {e}")
                            print("‚ö†Ô∏è REST API ile devam ediliyor...")
                            models = None
                        
                        # KAPSAMLI VERƒ∞ √áEKME BA≈ûLIYOR
                        print("\n" + "=" * 60)
                        print("üìä KAPSAMLI VERƒ∞ √áEKME BA≈ûLADI")
                        print("=" * 60)
                        
                        # XML-RPC ƒ∞LE VERƒ∞ √áEK
                        print("\n1Ô∏è‚É£ ALL ZUHAL filtresi ile fatura satƒ±rlarƒ± √ßekiliyor (XML-RPC)...")
                        
                        if models:
                            # XML-RPC ile √ßek
                            try:
                                print("‚è≥ Veri √ßekiliyor (bu 2-3 dakika s√ºrebilir)...")
                                
                                # ALL ZUHAL Fƒ∞LTRESƒ∞ - Kullanƒ±cƒ±nƒ±n kaydedilmi≈ü filtresini √ßek
                                print("üîç 'ALL ZUHAL' filtresinin domain'i √ßekiliyor...")
                                
                                try:
                                    # Kullanƒ±cƒ±nƒ±n T√úM filtrelerini √ßek (HER ƒ∞Kƒ∞ MODELDEN)
                                    print("üîç Kullanƒ±cƒ±nƒ±n t√ºm filtreleri √ßekiliyor...")
                                    
                                    # √ñnce account.invoice.report'tan ara (Fatura Raporlama)
                                    filters = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'ir.filters', 'search_read',
                                        [[
                                            ('user_id', '=', uid_xmlrpc),
                                            ('model_id', '=', 'account.invoice.report')
                                        ]],
                                        {'fields': ['name', 'domain', 'context', 'is_default', 'action_id', 'user_id']}
                                    )
                                    
                                    if filters:
                                        print(f"‚úÖ account.invoice.report'ta {len(filters)} filtre bulundu!")
                                    else:
                                        # Bulunamazsa account.move.line'dan ara
                                        print("‚ö†Ô∏è account.invoice.report'ta filtre yok, account.move.line kontrol ediliyor...")
                                        filters = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'ir.filters', 'search_read',
                                            [[
                                                ('user_id', '=', uid_xmlrpc),
                                                ('model_id', '=', 'account.move.line')
                                            ]],
                                            {'fields': ['name', 'domain', 'context', 'is_default', 'action_id', 'user_id']}
                                        )
                                    
                                    # Se√ßenek 2: Eƒüer yoksa, genel (payla≈üƒ±lmƒ±≈ü) filtreleri de ara
                                    if not filters:
                                        print("‚ö†Ô∏è Kullanƒ±cƒ±ya √∂zel filtre yok, genel filtreler kontrol ediliyor...")
                                        filters = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'ir.filters', 'search_read',
                                            [[
                                                ('model_id', '=', 'account.move.line'),
                                                '|',
                                                ('user_id', '=', uid_xmlrpc),
                                                ('user_id', '=', False)  # Payla≈üƒ±lmƒ±≈ü filtreler
                                            ]],
                                            {'fields': ['name', 'domain', 'context', 'is_default', 'action_id', 'user_id']}
                                        )
                                    
                                    print(f"üìã Bulunan filtreler ({len(filters)} adet):")
                                    for f in filters:
                                        print(f"   - '{f['name']}' (default: {f.get('is_default', False)}, user: {f.get('user_id', 'N/A')})")
                                    
                                    # "ALL ZUHAL" filtresini bul (tam e≈üle≈üme veya kƒ±smi)
                                    target_filter = None
                                    
                                    # 1. Tam e≈üle≈üme
                                    for f in filters:
                                        if f['name'].lower() == 'all zuhal':
                                            target_filter = f
                                            print(f"‚úÖ Tam e≈üle≈üme bulundu: '{f['name']}'")
                                            break
                                    
                                    # 2. Kƒ±smi e≈üle≈üme (hem all hem zuhal i√ßeren)
                                    if not target_filter:
                                        for f in filters:
                                            if 'all' in f['name'].lower() and 'zuhal' in f['name'].lower():
                                                target_filter = f
                                                print(f"‚úÖ Kƒ±smi e≈üle≈üme bulundu: '{f['name']}'")
                                                break
                                    
                                    # 3. Sadece "zuhal" i√ßeren
                                    if not target_filter:
                                        for f in filters:
                                            if 'zuhal' in f['name'].lower():
                                                target_filter = f
                                                print(f"‚úÖ 'Zuhal' i√ßeren filtre bulundu: '{f['name']}'")
                                                break
                                    
                                    # 4. √ñn tanƒ±mlƒ± filtre
                                    if not target_filter:
                                        for f in filters:
                                            if f.get('is_default'):
                                                target_filter = f
                                                print(f"‚úÖ √ñn tanƒ±mlƒ± filtre kullanƒ±lƒ±yor: '{f['name']}'")
                                                break
                                    
                                    # 5. ƒ∞lk filtre
                                    if not target_filter and filters:
                                        target_filter = filters[0]
                                        print(f"‚ö†Ô∏è Hi√ßbir e≈üle≈üme yok, ilk filtre kullanƒ±lƒ±yor: '{target_filter['name']}'")
                                    
                                    filters = [target_filter] if target_filter else []
                                    
                                    if filters and len(filters) > 0:
                                        filter_data = filters[0]
                                        print(f"‚úÖ Filtre bulundu: {filter_data['name']}")
                                        print(f"üìã Domain: {filter_data['domain']}")
                                        
                                        # Domain'i parse et
                                        import ast
                                        domain = ast.literal_eval(filter_data['domain']) if filter_data['domain'] else []
                                        
                                        # Domain'i account.move.line formatƒ±na √ßevir
                                        print("üîÑ Domain account.move.line formatƒ±na √ßevriliyor...")
                                        converted_domain = []
                                        for item in domain:
                                            if isinstance(item, tuple) and len(item) >= 3:
                                                field, operator, value = item[0], item[1], item[2]
                                                # Alan adlarƒ±nƒ± d√∂n√º≈üt√ºr
                                                if field == 'state':
                                                    field = 'move_id.state'
                                                elif field == 'move_type':
                                                    field = 'move_id.move_type'
                                                elif field == 'analytic_account_id':
                                                    field = 'analytic_account_id'
                                                elif field == 'product_categ_id':
                                                    field = 'product_id.categ_id'
                                                elif field == 'product_id':
                                                    field = 'product_id'
                                                converted_domain.append((field, operator, value))
                                            else:
                                                converted_domain.append(item)
                                        
                                        # display_type ekle
                                        converted_domain.append(('display_type', '=', False))
                                        domain = converted_domain
                                        print(f"‚úÖ Domain d√∂n√º≈üt√ºr√ºld√º: {len(domain)} ko≈üul")
                                    else:
                                        print("‚ö†Ô∏è 'ALL ZUHAL' filtresi bulunamadƒ±! Temel filtre kullanƒ±lƒ±yor...")
                                        domain = [
                                            ('state', 'not in', ('draft', 'cancel')),
                                            ('move_type', 'in', ('out_invoice', 'out_refund'))
                                        ]
                                except Exception as e:
                                    print(f"‚ö†Ô∏è Filtre √ßekme hatasƒ±: {e}")
                                    print("üìå Temel filtre kullanƒ±lƒ±yor...")
                                    domain = [
                                        ('move_id.state', '=', 'posted'),
                                        ('move_id.move_type', '=', 'out_invoice'),
                                        ('display_type', '=', False)
                                    ]
                                
                                # Kayƒ±t sayƒ±sƒ±nƒ± kontrol et (account.move.line)
                                count = models.execute_kw(
                                    db, uid_xmlrpc, password,
                                    'account.move.line', 'search_count',
                                    [domain]
                                )
                                print(f"üìä Filtrelenmi≈ü kayƒ±t sayƒ±sƒ±: {count:,}")
                                
                                # account.move.line alanlarƒ±
                                fields = [
                                    'move_id', 'date', 'create_date', 'write_date',
                                    'product_id', 'quantity', 'price_subtotal', 
                                    'currency_id', 'partner_id', 'analytic_account_id'
                                ]
                                
                                # T√úM VERƒ∞Yƒ∞ BATCH (PAR√áA PAR√áA) √áEK
                                print("‚ö†Ô∏è T√ºm fatura satƒ±rlarƒ± √ßekiliyor (10,000'erlik par√ßalar halinde)...")
                                
                                all_data = []
                                batch_size = 10000
                                offset = 0
                                batch_count = 0
                                
                                max_errors = 5
                                error_count = 0
                                
                                while True:
                                    batch_count += 1
                                    print(f"üì¶ Batch {batch_count}: {offset} - {offset + batch_size} arasƒ± √ßekiliyor...")
                                    
                                    try:
                                        batch_data = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'account.move.line', 'search_read',
                                            [domain],
                                            {'fields': fields, 'limit': batch_size, 'offset': offset}
                                        )
                                        
                                        if not batch_data or len(batch_data) == 0:
                                            print(f"‚úÖ Batch {batch_count}: Veri bitti!")
                                            break
                                        
                                        all_data.extend(batch_data)
                                        print(f"‚úÖ Batch {batch_count}: {len(batch_data)} kayƒ±t eklendi (Toplam: {len(all_data)})")
                                        
                                        # Hata sayacƒ±nƒ± sƒ±fƒ±rla (ba≈üarƒ±lƒ± batch)
                                        error_count = 0
                                        
                                        if len(batch_data) < batch_size:
                                            print(f"‚úÖ Son batch tamamlandƒ±!")
                                            break
                                        
                                        offset += batch_size
                                        
                                    except Exception as e:
                                        error_count += 1
                                        print(f"‚ö†Ô∏è Batch {batch_count} hatasƒ±: {str(e)[:100]}")
                                        print(f"‚è≠Ô∏è Batch atlanƒ±yor... (Hata: {error_count}/{max_errors})")
                                        
                                        if error_count >= max_errors:
                                            print(f"‚ùå √áok fazla hata ({max_errors}), durduruluyor...")
                                            break
                                        
                                        # Hatalƒ± batch'i atla
                                        offset += batch_size
                                        continue
                                
                                print(f"\n‚úÖ TOPLAM {len(all_data)} fatura satƒ±rƒ± √ßekildi (XML-RPC)!")
                                print(f"üìä Veri boyutu: ~{len(all_data) * 0.5 / 1024:.2f} MB")
                                
                                # Satƒ±≈ü temsilcilerini √ßek (account.move'dan)
                                print(f"\nüë§ Satƒ±≈ü temsilcileri √ßekiliyor...")
                                move_ids = list(set([line.get('move_id')[0] for line in all_data if line.get('move_id') and isinstance(line.get('move_id'), list)]))
                                print(f"üì¶ {len(move_ids)} fatura ba≈ülƒ±ƒüƒ± i√ßin satƒ±≈ü temsilcisi √ßekiliyor (5000'erlik batch)...")
                                
                                invoice_user_map = {}
                                try:
                                    for i in range(0, len(move_ids), 5000):
                                        batch_ids = move_ids[i:i+5000]
                                        print(f"   üì¶ Fatura batch {i//5000 + 1}: {len(batch_ids)} fatura...")
                                        batch_moves = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'account.move', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'invoice_user_id', 'user_id']}
                                        )
                                        for move in batch_moves:
                                            move_id = move['id']
                                            # invoice_user_id veya user_id dene
                                            if move.get('invoice_user_id') and isinstance(move.get('invoice_user_id'), list):
                                                invoice_user_map[move_id] = move['invoice_user_id'][1]
                                            elif move.get('user_id') and isinstance(move.get('user_id'), list):
                                                invoice_user_map[move_id] = move['user_id'][1]
                                            else:
                                                invoice_user_map[move_id] = 'Sistem'
                                    print(f"‚úÖ {len(invoice_user_map)} fatura i√ßin satƒ±≈ü temsilcisi e≈üle≈ütirildi!")
                                except Exception as e:
                                    print(f"‚ö†Ô∏è Satƒ±≈ü temsilcisi √ßekme hatasƒ±: {e}")
                                    invoice_user_map = {}
                                
                            except Exception as e:
                                print(f"‚ùå XML-RPC veri √ßekme hatasƒ±: {e}")
                                all_data = None
                        else:
                            all_data = None
                        
                        if all_data and len(all_data) > 0:
                            
                            # Verileri i≈üle ve JSON olu≈ütur
                            print("\n2Ô∏è‚É£ Veriler i≈üleniyor ve kategorilere ayrƒ±lƒ±yor...")
                            
                            processed_data = {
                                'categories': {},
                                'products': {},
                                'partners': {},
                                'sales_persons': {},
                                'cities': {},
                                'stores': {},  # Maƒüaza bilgisi (analytic_account)
                                'years': {},
                                'months': {},
                                'raw_count': len(all_data),
                                'last_update': datetime.now().isoformat()
                            }
                            
                            # √ñnce √ºr√ºn kategorilerini ve partner ≈üehirlerini √ßek (XML-RPC)
                            print("üì¶ √úr√ºn kategorileri √ßekiliyor (Hiyerar≈üik - XML-RPC)...")
                            
                            product_ids = list(set([line.get('product_id')[0] for line in all_data if line.get('product_id') and isinstance(line.get('product_id'), list)]))
                            partner_ids = list(set([line.get('partner_id')[0] for line in all_data if line.get('partner_id') and isinstance(line.get('partner_id'), list)]))
                            
                            product_categ_map = {}
                            product_brand_map = {}
                            category_hierarchy = {}
                            partner_city_map = {}
                            partner_tags_map = {}
                            
                            if product_ids and models:  # T√úM √úR√úNLER
                                try:
                                    # √úr√ºnleri BATCH √ßek - T√úM √úR√úNLER (kategori + marka)
                                    print(f"üì¶ {len(product_ids)} √ºr√ºn √ßekiliyor (5000'erlik batch)...")
                                    products = []
                                    for i in range(0, len(product_ids), 5000):
                                        batch_ids = product_ids[i:i+5000]
                                        print(f"   üì¶ √úr√ºn batch {i//5000 + 1}: {len(batch_ids)} √ºr√ºn...")
                                        batch_products = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'product.product', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'categ_id', 'product_brand_id', 'product_tmpl_id']}
                                        )
                                        products.extend(batch_products)
                                    print(f"‚úÖ Toplam {len(products)} √ºr√ºn √ßekildi!")
                                    
                                    # Kategori ID'lerini topla
                                    categ_ids = list(set([prod['categ_id'][0] for prod in products if prod.get('categ_id') and isinstance(prod.get('categ_id'), list)]))
                                    
                                    # T√ºm kategorileri √ßek (parent bilgisiyle)
                                    print(f"üìÇ {len(categ_ids)} kategori detayƒ± √ßekiliyor...")
                                    categories = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'product.category', 'search_read',
                                        [[('id', 'in', categ_ids)]],
                                        {'fields': ['id', 'name', 'parent_id', 'complete_name']}
                                    )
                                    
                                    # Kategori hiyerar≈üisini olu≈ütur (5 seviyeye kadar)
                                    for cat in categories:
                                        cat_id = cat['id']
                                        cat_name = cat.get('complete_name') or cat.get('name')
                                        parent_name = cat['parent_id'][1] if cat.get('parent_id') and isinstance(cat.get('parent_id'), list) else None
                                        
                                        # Kategori yolunu par√ßala (√∂rn: "M√ºzik / Gitarlar / Elektro" -> ["M√ºzik", "Gitarlar", "Elektro"])
                                        cat_levels = cat_name.split(' / ') if ' / ' in cat_name else [cat_name]
                                        
                                        category_hierarchy[cat_id] = {
                                            'name': cat_name,
                                            'parent': parent_name,
                                            'full_path': cat_name,
                                            'level1': cat_levels[0] if len(cat_levels) > 0 else '',
                                            'level2': cat_levels[1] if len(cat_levels) > 1 else '',
                                            'level3': cat_levels[2] if len(cat_levels) > 2 else '',
                                            'level4': cat_levels[3] if len(cat_levels) > 3 else '',
                                            'level5': cat_levels[4] if len(cat_levels) > 4 else ''
                                        }
                                    
                                    # √úr√ºn-kategori ve marka e≈üle≈ütirmesi
                                    product_brand_map = {}
                                    for prod in products:
                                        prod_id = prod['id']
                                        
                                        # Kategori
                                        categ = prod.get('categ_id')
                                        if categ and isinstance(categ, list) and len(categ) > 0:
                                            cat_id = categ[0]
                                            if cat_id in category_hierarchy:
                                                product_categ_map[prod_id] = category_hierarchy[cat_id]['full_path']
                                            else:
                                                product_categ_map[prod_id] = categ[1] if len(categ) > 1 else 'Diƒüer'
                                        else:
                                            product_categ_map[prod_id] = 'Diƒüer'
                                        
                                        # Marka
                                        brand = None
                                        if prod.get('product_brand_id') and isinstance(prod.get('product_brand_id'), list):
                                            brand = prod['product_brand_id'][1]
                                        
                                        product_brand_map[prod_id] = brand if brand else 'Bilinmeyen'
                                    
                                    print(f"‚úÖ {len(product_categ_map)} √ºr√ºn kategorisi e≈üle≈ütirildi (XML-RPC)")
                                    print(f"‚úÖ {len(product_brand_map)} √ºr√ºn markasƒ± e≈üle≈ütirildi")
                                    print(f"‚úÖ {len(category_hierarchy)} kategori hiyerar≈üisi olu≈üturuldu (5 seviye)!")
                                    
                                    # Kategori hiyerar≈üisini data'ya ekle
                                    processed_data['category_hierarchy'] = category_hierarchy
                                    
                                except Exception as e:
                                    print(f"‚ö†Ô∏è √úr√ºn kategorisi √ßekme hatasƒ±: {e}")
                                    category_hierarchy = {}
                                    product_brand_map = {}
                            
                            # Partner ≈üehir bilgilerini √ßek (XML-RPC) - Hƒ∞BRƒ∞T Y√ñNTEM (state_id dahil) - T√úM PARTNER
                            print(f"\nüèôÔ∏è Partner ≈üehir bilgileri √ßekiliyor (T√úM PARTNER: {len(partner_ids)})...")
                            if partner_ids and models:
                                try:
                                    # Partnerleri BATCH √ßek (5000'erlik)
                                    print(f"üì¶ {len(partner_ids)} partner √ßekiliyor (5000'erlik batch)...")
                                    partners = []
                                    for i in range(0, len(partner_ids), 5000):
                                        batch_ids = partner_ids[i:i+5000]
                                        print(f"   üì¶ Partner batch {i//5000 + 1}: {len(batch_ids)} partner...")
                                        batch_partners = models.execute_kw(
                                            db, uid_xmlrpc, password,
                                            'res.partner', 'search_read',
                                            [[('id', 'in', batch_ids)]],
                                            {'fields': ['id', 'name', 'city', 'state_id']}
                                        )
                                        partners.extend(batch_partners)
                                    print(f"‚úÖ Toplam {len(partners)} partner √ßekildi!")
                                    
                                    # ≈ûehir listesi (partner adƒ±ndan √ßƒ±karmak i√ßin)
                                    city_keywords = [
                                        'ƒ∞stanbul', 'Ankara', 'ƒ∞zmir', 'Antalya', 'Bursa', 'Adana', 
                                        'Konya', 'Gaziantep', '≈ûanlƒ±urfa', 'Kocaeli', 'Mersin', 
                                        'Diyarbakƒ±r', 'Hatay', 'Manisa', 'Kayseri', 'Samsun',
                                        'Balƒ±kesir', 'Kahramanmara≈ü', 'Van', 'Aydƒ±n', 'Denizli',
                                        'Sakarya', 'Tekirdaƒü', 'Muƒüla', 'Eski≈üehir', 'Mardin',
                                        'Malatya', 'Erzurum', 'Trabzon', 'Elazƒ±ƒü', 'Ordu',
                                        '√áorum', 'Afyonkarahisar', 'Sivas', 'Tokat', 'Giresun',
                                        'Aksaray', 'Niƒüde', 'Nev≈üehir', 'Kƒ±rƒ±kkale', 'Kƒ±r≈üehir',
                                        'Bodrum', 'T√ºnel', 'Hilltown', 'Uniq', 'Akasya', 'Kanyon',
                                        'Zorlu', 'Emaar', 'Marmara', 'Optimum', 'Capacity', 'Forum',
                                        'Cevahir', 'Metropol', 'Palladium', 'Galleria', 'Mall of'
                                    ]
                                    
                                    for partner in partners:
                                        partner_id = partner['id']
                                        partner_name = partner.get('name', '')
                                        city_field = partner.get('city', '').strip()
                                        state_field = partner.get('state_id')
                                        
                                        # 1. √ñnce state_id'den (ƒ∞l/B√∂lge bilgisi - en doƒüru)
                                        if state_field and isinstance(state_field, list) and len(state_field) > 1:
                                            partner_city_map[partner_id] = state_field[1]  # [id, name]
                                        # 2. Sonra city alanƒ±ndan
                                        elif city_field and city_field != '':
                                            partner_city_map[partner_id] = city_field
                                        else:
                                            # 3. Partner adƒ±ndan ≈üehir √ßƒ±kar
                                            found_city = None
                                            for city in city_keywords:
                                                if city.lower() in partner_name.lower():
                                                    found_city = city
                                                    break
                                            
                                            partner_city_map[partner_id] = found_city if found_city else 'Bilinmeyen'
                                    
                                    # ƒ∞statistik
                                    with_city = sum(1 for c in partner_city_map.values() if c != 'Bilinmeyen')
                                    print(f"‚úÖ {len(partner_city_map)} partner i≈ülendi!")
                                    print(f"   üìç ≈ûehir bilgisi olan: {with_city}")
                                    print(f"   ‚ùì Bilinmeyen ≈üehir: {len(partner_city_map) - with_city}")
                                    
                                except Exception as e:
                                    print(f"‚ö†Ô∏è Partner ≈üehir bilgisi √ßekme hatasƒ±: {e}")
                                    partner_city_map = {}
                                    partner_tags_map = {}
                            
                            # Detay kayƒ±tlarƒ± i√ßin liste
                            details = []
                            
                            for line in all_data:
                                try:
                                    # Tarih
                                    date_str = line.get('date', '')
                                    if date_str:
                                        year = date_str[:4]
                                        month = date_str[:7]
                                    else:
                                        year = 'Bilinmeyen'
                                        month = 'Bilinmeyen'
                                    
                                    # Saat bilgisi - create_date'den √ßƒ±kar
                                    create_date_str = line.get('create_date', '')
                                    create_hour = 0
                                    create_day_of_week = 0
                                    
                                    if create_date_str:
                                        try:
                                            # Format: '2025-10-15 14:35:22'
                                            from datetime import datetime
                                            dt = datetime.strptime(create_date_str, '%Y-%m-%d %H:%M:%S')
                                            create_hour = dt.hour
                                            create_day_of_week = dt.weekday()  # 0=Pazartesi, 6=Pazar
                                        except:
                                            pass
                                    
                                    # √úr√ºn
                                    product = line.get('product_id')
                                    product_id = product[0] if isinstance(product, list) else 0
                                    
                                    # Kategori (√ºr√ºn map'inden)
                                    categ_name = product_categ_map.get(product_id, 'Diƒüer')
                                    
                                    # √úr√ºn
                                    product = line.get('product_id')
                                    product_name = product[1] if isinstance(product, list) and len(product) > 1 else 'Bilinmeyen'
                                    product_id = product[0] if isinstance(product, list) else 0
                                    
                                    # M√º≈üteri/Maƒüaza
                                    partner = line.get('partner_id')
                                    partner_name = partner[1] if isinstance(partner, list) and len(partner) > 1 else 'Bilinmeyen'
                                    partner_id = partner[0] if isinstance(partner, list) else 0
                                    
                                    # ≈ûehir - partner_city_map'den √ßek
                                    city = partner_city_map.get(partner_id, 'Bilinmeyen')
                                    
                                    # Maƒüaza - analytic_account_id'den
                                    analytic_account = line.get('analytic_account_id')
                                    store_name = analytic_account[1] if isinstance(analytic_account, list) and len(analytic_account) > 1 else 'Genel'
                                    
                                    # Satƒ±≈ü temsilcisi - invoice_user_map'ten al
                                    move_id_value = line.get('move_id')
                                    move_id_int = move_id_value[0] if isinstance(move_id_value, list) else 0
                                    user_name = invoice_user_map.get(move_id_int, 'Sistem')
                                    
                                    # Sayƒ±sal deƒüerler - SADECE USD VE Mƒ∞KTAR
                                    qty = float(line.get('quantity', 0))
                                    
                                    # USD tutar - Fatura kaleminde zaten USD cinsinden
                                    usd_amount = float(line.get('price_subtotal', 0))
                                    
                                    # Kategori bazlƒ± toplama - SADECE USD VE Mƒ∞KTAR
                                    if categ_name not in processed_data['categories']:
                                        processed_data['categories'][categ_name] = {
                                            'quantity': 0, 'usd_amount': 0, 'years': {}
                                        }
                                    
                                    processed_data['categories'][categ_name]['quantity'] += qty
                                    processed_data['categories'][categ_name]['usd_amount'] += usd_amount
                                    
                                    if year not in processed_data['categories'][categ_name]['years']:
                                        processed_data['categories'][categ_name]['years'][year] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['categories'][categ_name]['years'][year]['quantity'] += qty
                                    processed_data['categories'][categ_name]['years'][year]['usd_amount'] += usd_amount
                                    
                                    # √úr√ºn bazlƒ± - SADECE USD VE Mƒ∞KTAR + MARKA + KATEGORƒ∞ SEVƒ∞YELERƒ∞
                                    if product_id not in processed_data['products']:
                                        # Kategori seviyelerini al
                                        cat_hierarchy = category_hierarchy.get(
                                            [k for k, v in product_categ_map.items() if k == product_id][0] if product_id in product_categ_map else None
                                        ) if product_id in product_categ_map else {}
                                        
                                        # Daha basit y√∂ntem: product_id'den kategori bilgisini al
                                        cat_info = {}
                                        for cat_id, cat_data in category_hierarchy.items():
                                            if product_categ_map.get(product_id) == cat_data.get('full_path'):
                                                cat_info = cat_data
                                                break
                                        
                                        processed_data['products'][product_id] = {
                                            'name': product_name,
                                            'category': categ_name,
                                            'brand': product_brand_map.get(product_id, 'Bilinmeyen'),
                                            'category_level1': cat_info.get('level1', ''),
                                            'category_level2': cat_info.get('level2', ''),
                                            'category_level3': cat_info.get('level3', ''),
                                            'category_level4': cat_info.get('level4', ''),
                                            'category_level5': cat_info.get('level5', ''),
                                            'quantity': 0,
                                            'usd_amount': 0
                                        }
                                    
                                    processed_data['products'][product_id]['quantity'] += qty
                                    processed_data['products'][product_id]['usd_amount'] += usd_amount
                                    
                                    # M√º≈üteri/Maƒüaza bazlƒ± - SADECE USD VE Mƒ∞KTAR + ≈ûEHƒ∞R + ETƒ∞KETLER
                                    if partner_id not in processed_data['partners']:
                                        processed_data['partners'][partner_id] = {
                                            'name': partner_name,
                                            'city': city,
                                            'quantity': 0,
                                            'usd_amount': 0
                                        }
                                    
                                    processed_data['partners'][partner_id]['quantity'] += qty
                                    processed_data['partners'][partner_id]['usd_amount'] += usd_amount
                                    
                                    # Satƒ±≈ü Temsilcisi bazlƒ± - SADECE USD VE Mƒ∞KTAR
                                    if user_name not in processed_data['sales_persons']:
                                        processed_data['sales_persons'][user_name] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['sales_persons'][user_name]['quantity'] += qty
                                    processed_data['sales_persons'][user_name]['usd_amount'] += usd_amount
                                    
                                    # ≈ûehir bazlƒ± - SADECE USD VE Mƒ∞KTAR
                                    if city not in processed_data['cities']:
                                        processed_data['cities'][city] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['cities'][city]['quantity'] += qty
                                    processed_data['cities'][city]['usd_amount'] += usd_amount
                                    
                                    # Maƒüaza bazlƒ± - SADECE USD VE Mƒ∞KTAR
                                    if store_name not in processed_data['stores']:
                                        processed_data['stores'][store_name] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['stores'][store_name]['quantity'] += qty
                                    processed_data['stores'][store_name]['usd_amount'] += usd_amount
                                    
                                    # Yƒ±l bazlƒ± - SADECE USD VE Mƒ∞KTAR
                                    if year not in processed_data['years']:
                                        processed_data['years'][year] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['years'][year]['quantity'] += qty
                                    processed_data['years'][year]['usd_amount'] += usd_amount
                                    
                                    # Ay bazlƒ± - SADECE USD VE Mƒ∞KTAR
                                    if month not in processed_data['months']:
                                        processed_data['months'][month] = {
                                            'quantity': 0, 'usd_amount': 0
                                        }
                                    
                                    processed_data['months'][month]['quantity'] += qty
                                    processed_data['months'][month]['usd_amount'] += usd_amount
                                    
                                    # Detay kaydƒ± ekle
                                    cat_info = {}
                                    for cat_id, cat_data in category_hierarchy.items():
                                        if product_categ_map.get(product_id) == cat_data.get('full_path'):
                                            cat_info = cat_data
                                            break
                                    
                                    details.append({
                                        'date': date_str,
                                        'create_hour': create_hour,
                                        'day_of_week': create_day_of_week,
                                        'partner': partner_name,
                                        'product': product_name,
                                        'brand': product_brand_map.get(product_id, 'Bilinmeyen'),
                                        'category_1': cat_info.get('level1', ''),
                                        'category_2': cat_info.get('level2', ''),
                                        'category_3': cat_info.get('level3', ''),
                                        'category_4': cat_info.get('level4', ''),
                                        'sales_person': user_name,
                                        'store': store_name,
                                        'city': city,
                                        'quantity': qty,
                                        'usd_amount': usd_amount
                                    })
                                    
                                except Exception as e:
                                    print(f"‚ö†Ô∏è Satƒ±r i≈üleme hatasƒ±: {e}")
                                    continue
                            
                            print("\n‚úÖ Veri i≈üleme tamamlandƒ±!")
                            print(f"üì¶ Kategori sayƒ±sƒ±: {len(processed_data['categories'])}")
                            print(f"üè∑Ô∏è √úr√ºn sayƒ±sƒ±: {len(processed_data['products'])}")
                            print(f"ü§ù M√º≈üteri sayƒ±sƒ±: {len(processed_data['partners'])}")
                            print(f"üìã Detay kayƒ±t sayƒ±sƒ±: {len(details)}")
                            print(f"üë§ Satƒ±≈ü Temsilcisi sayƒ±sƒ±: {len(processed_data['sales_persons'])}")
                            print(f"üèôÔ∏è ≈ûehir sayƒ±sƒ±: {len(processed_data['cities'])}")
                            print(f"üìÖ Yƒ±l sayƒ±sƒ±: {len(processed_data['years'])}")
                            print(f"üìÜ Ay sayƒ±sƒ±: {len(processed_data['months'])}")
                            
                            # RES.PARTNER (M√º≈üteri) Detaylƒ± Bilgileri √áek (XML-RPC) - T√úM M√ú≈ûTERƒ∞LER
                            print("\n4Ô∏è‚É£ M√º≈üteri detay bilgileri √ßekiliyor (res.partner - XML-RPC)...")
                            
                            partner_ids = list(processed_data['partners'].keys())  # T√úM M√ú≈ûTERƒ∞LER
                            print(f"üë• Toplam {len(partner_ids)} m√º≈üteri detayƒ± √ßekilecek...")
                            
                            if partner_ids and models:
                                try:
                                    partners = models.execute_kw(
                                        db, uid_xmlrpc, password,
                                        'res.partner', 'search_read',
                                        [[('id', 'in', partner_ids)]],
                                        {
                                            'fields': [
                                                'id', 'name', 'email', 'phone', 'mobile',
                                                'street', 'city', 'state_id', 'country_id',
                                                'customer_rank', 'supplier_rank', 'company_type',
                                                'vat', 'category_id', 'user_id', 'create_date'
                                            ]
                                        }
                                    )
                                    
                                    partner_details = {}
                                    
                                    for partner in partners:
                                        partner_id = partner.get('id')
                                        
                                        state = partner.get('state_id')
                                        state_name = state[1] if isinstance(state, list) and len(state) > 1 else ''
                                        
                                        country = partner.get('country_id')
                                        country_name = country[1] if isinstance(country, list) and len(country) > 1 else ''
                                        
                                        categories = partner.get('category_id', [])
                                        category_names = [cat[1] for cat in categories if isinstance(cat, list) and len(cat) > 1] if categories else []
                                        
                                        user = partner.get('user_id')
                                        user_name = user[1] if isinstance(user, list) and len(user) > 1 else ''
                                        
                                        partner_details[partner_id] = {
                                            'name': partner.get('name', ''),
                                            'email': partner.get('email', ''),
                                            'phone': partner.get('phone', ''),
                                            'mobile': partner.get('mobile', ''),
                                            'street': partner.get('street', ''),
                                            'city': partner.get('city', ''),
                                            'state': state_name,
                                            'country': country_name,
                                            'customer_rank': partner.get('customer_rank', 0),
                                            'supplier_rank': partner.get('supplier_rank', 0),
                                            'company_type': partner.get('company_type', ''),
                                            'vat': partner.get('vat', ''),
                                            'categories': category_names,
                                            'sales_person': user_name,
                                            'create_date': partner.get('create_date', ''),
                                            'sales_data': processed_data['partners'].get(partner_id, {})
                                        }
                                    
                                    processed_data['partner_details'] = partner_details
                                    
                                    print(f"‚úÖ {len(partner_details)} m√º≈üteri detayƒ± √ßekildi (XML-RPC)!")
                                    print(f"üìß Email olan: {sum(1 for p in partner_details.values() if p['email'])}")
                                    print(f"üì± Telefon olan: {sum(1 for p in partner_details.values() if p['phone'] or p['mobile'])}")
                                    print(f"üèôÔ∏è ≈ûehir bilgisi olan: {sum(1 for p in partner_details.values() if p['city'])}")
                                    
                                except Exception as e:
                                    print(f"‚ö†Ô∏è M√º≈üteri detaylarƒ± √ßekme hatasƒ±: {e}")
                                    processed_data['partner_details'] = {}
                            else:
                                print("‚ö†Ô∏è M√º≈üteri ID'leri yok veya XML-RPC baƒülantƒ±sƒ± yok")
                                processed_data['partner_details'] = {}
                            
                            # Detaylarƒ± processed_data'ya ekle
                            processed_data['details'] = details
                            
                            # JSON dosyalarƒ± olu≈ütur (YILLARA B√ñL√úNM√ú≈û + GZIP)
                            print("\n5Ô∏è‚É£ JSON dosyalarƒ± olu≈üturuluyor (yƒ±llara b√∂l√ºnm√º≈ü + sƒ±kƒ±≈ütƒ±rƒ±lmƒ±≈ü)...")
                            
                            import gzip
                            from collections import defaultdict
                            
                            # Verileri yƒ±llara g√∂re ayƒ±r
                            data_by_year = defaultdict(list)
                            for record in details:
                                year = record['date'][:4] if record.get('date') else '2025'
                                data_by_year[year].append(record)
                            
                            print(f"üìä Veriler {len(data_by_year)} yƒ±la b√∂l√ºnd√º:")
                            for year in sorted(data_by_year.keys()):
                                print(f"   - {year}: {len(data_by_year[year])} kayƒ±t")
                            
                            # Her yƒ±l i√ßin ayrƒ± sƒ±kƒ±≈ütƒ±rƒ±lmƒ±≈ü dosya olu≈ütur
                            created_files = []
                            for year in sorted(data_by_year.keys()):
                                year_data = {
                                    'year': year,
                                    'categories': processed_data['categories'],
                                    'products': processed_data['products'],
                                    'partners': processed_data['partners'],
                                    'partner_details': processed_data['partner_details'],
                                    'sales_persons': processed_data['sales_persons'],
                                    'stores': processed_data['stores'],
                                    'years': processed_data['years'],
                                    'months': processed_data['months'],
                                    'details': data_by_year[year]
                                }
                                
                                filename = f'data-{year}.json.gz'
                                with gzip.open(filename, 'wt', encoding='utf-8') as f:
                                    json.dump(year_data, f, ensure_ascii=False)
                                
                                # Dosya boyutunu kontrol et
                                import os
                                file_size_mb = os.path.getsize(filename) / (1024 * 1024)
                                print(f"   ‚úÖ {filename}: {file_size_mb:.2f} MB")
                                created_files.append(filename)
                            
                            # Metadata dosyasƒ± olu≈ütur (hangi yƒ±llar var?)
                            metadata = {
                                'years': sorted(data_by_year.keys()),
                                'total_records': len(details),
                                'files': created_files,
                                'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                            }
                            
                            with open('data-metadata.json', 'w', encoding='utf-8') as f:
                                json.dump(metadata, f, ensure_ascii=False, indent=2)
                            
                            print(f"‚úÖ {len(created_files)} dosya olu≈üturuldu!")
                            print(f"‚úÖ data-metadata.json olu≈üturuldu!")
                            
                            print("\n" + "=" * 60)
                            print("üéâ T√úM VERƒ∞LER BA≈ûARIYLA √áEKƒ∞LDƒ∞ VE ƒ∞≈ûLENDƒ∞!")
                            print("=" * 60)
                            
                        else:
                            print(f"‚ùå Fatura verileri √ßekilemedi!")
                            print(f"Yanƒ±t: {all_data if 'all_data' in locals() else 'Veri yok'}")
                            exit(1)
                        
                    else:
                        print("‚ùå UID bulunamadƒ±!")
                        print(f"Session: {session_info}")
                        exit(1)
                else:
                    print("‚ùå Ge√ßersiz session!")
                    print(f"Result: {result}")
                    exit(1)
            else:
                print("‚ùå Beklenmeyen yanƒ±t!")
                print(f"Response: {result}")
                exit(1)
                
        except Exception as e:
            print(f"‚ùå Hata: {e}")
            import traceback
            traceback.print_exc()
            exit(1)
        
        EOF
    
    - name: Dosya Boyutlarƒ±nƒ± Kontrol Et
      run: |
        echo "üìä Olu≈üturulan dosyalar:"
        ls -lh data-*.json.gz data-metadata.json 2>/dev/null || echo "‚ö†Ô∏è Dosyalar bulunamadƒ±"
        
        echo ""
        echo "üìä Dosya boyutlarƒ±:"
        for file in data-*.json.gz; do
          if [ -f "$file" ]; then
            SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
            SIZE_MB=$((SIZE / 1024 / 1024))
            echo "   - $file: ${SIZE_MB} MB"
            
            if [ $SIZE_MB -gt 100 ]; then
              echo "   ‚ö†Ô∏è UYARI: $file 100 MB'dan b√ºy√ºk!"
            fi
          fi
        done
    
    - name: Deƒüi≈üiklikleri commit et ve y√ºkle
      env:
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Eski data.json varsa sil (artƒ±k kullanmƒ±yoruz)
        if [[ -f "data.json" ]]; then
          echo "üóëÔ∏è Eski data.json siliniyor..."
          git rm -f data.json 2>/dev/null || rm -f data.json
        fi
        
        # Yeni dosyalarƒ± kontrol et
        if ls data-*.json.gz 1> /dev/null 2>&1; then
          echo "‚úÖ Yƒ±llara b√∂l√ºnm√º≈ü dosyalar bulundu"
          
          # √ñnce remote deƒüi≈üiklikleri √ßek
          echo "üîÑ Remote deƒüi≈üiklikler kontrol ediliyor..."
          git fetch origin
          
          # Pull yap
          if git pull --rebase origin main; then
            echo "‚úÖ Rebase ba≈üarƒ±lƒ±"
          elif git pull origin main; then
            echo "‚úÖ Merge ba≈üarƒ±lƒ±"
          else
            echo "‚ö†Ô∏è Pull ba≈üarƒ±sƒ±z, devam ediliyor..."
          fi
          
          # T√ºm data dosyalarƒ±nƒ± ekle
          git add data-*.json.gz data-metadata.json
          
          if [[ -n $(git status -s) ]]; then
            git commit -m "Veriler g√ºncellendi - $(date +'%Y-%m-%d %H:%M')"
            
            # Push URL'ini PAT ile g√ºncelle
            git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/toftamars/satiss-dashboard.git
            
            # Push dene, ba≈üarƒ±sƒ±z olursa force push
            if git push origin main; then
              echo "‚úÖ Deƒüi≈üiklikler GitHub'a y√ºklendi!"
            else
              echo "‚ö†Ô∏è Normal push ba≈üarƒ±sƒ±z, pull yapƒ±p tekrar deneniyor..."
              git pull --rebase origin main
              git push origin main
              echo "‚úÖ Deƒüi≈üiklikler GitHub'a y√ºklendi (rebase sonrasƒ±)!"
            fi
          else
            echo "‚ÑπÔ∏è Deƒüi≈üiklik yok"
          fi
        else
          echo "‚ö†Ô∏è data.json dosyasƒ± bulunamadƒ±"
        fi
