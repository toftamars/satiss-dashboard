/**
 * üìà Progressive Loader Module
 * Veriyi a≈üamalƒ± olarak y√ºkler ve g√∂sterir
 */

class ProgressiveLoader {
    constructor() {
        this.loadingStages = [
            { name: 'Sayfa ba≈ülatƒ±lƒ±yor', progress: 0 },
            { name: '√ñzet veriler y√ºkleniyor', progress: 20 },
            { name: 'Grafik hazƒ±rlanƒ±yor', progress: 40 },
            { name: 'Dashboard olu≈üturuluyor', progress: 60 },
            { name: 'Son dokunu≈ülar', progress: 80 },
            { name: 'Hazƒ±r!', progress: 100 }
        ];
        this.currentStage = 0;
        this.init();
    }

    init() {
        console.log('üìà ProgressiveLoader initialized');
    }

    /**
     * A≈ûAMA 1: Skeleton Screen (ƒ∞skelet Ekran)
     * Kullanƒ±cƒ± hemen bir ≈üeyler g√∂r√ºr, beklemez
     */
    showSkeletonScreen() {
        const loadingScreen = document.getElementById('loadingScreen');
        if (!loadingScreen) return;

        // Progress bar g√ºncelle
        this.updateProgress(0, 'Sayfa ba≈ülatƒ±lƒ±yor...');
        
        console.log('üíÄ Skeleton screen g√∂steriliyor');
    }

    /**
     * A≈ûAMA 2: √ñzet verileri g√∂ster (1 saniye i√ßinde)
     */
    async loadAndShowSummary() {
        try {
            this.updateProgress(20, 'üìä √ñzet veriler y√ºkleniyor...');
            
            // Sadece √∂zet y√ºkle (hƒ±zlƒ±!)
            let summary;
            if (window.LazyLoader) {
                summary = await window.LazyLoader.loadInitialSummary();
            } else if (window.DataLoader) {
                // Fallback: metadata y√ºkle
                summary = await window.DataLoader.loadMetadata();
            }
            
            // √ñzet kartlarƒ± hemen g√∂ster
            if (summary) {
                this.showSummaryCards(summary);
            }
            
            this.updateProgress(40, '‚úÖ √ñzet hazƒ±r!');
            
            return summary;
        } catch (error) {
            console.error('‚ùå √ñzet y√ºkleme hatasƒ±:', error);
            // Hata olsa bile devam et
            this.updateProgress(40, '‚ö†Ô∏è √ñzet y√ºklenemedi, devam ediliyor...');
            return null;
        }
    }

    /**
     * A≈ûAMA 3: Grafikler i√ßin placeholder g√∂ster
     */
    showChartPlaceholders() {
        this.updateProgress(60, 'üìä Grafikler hazƒ±rlanƒ±yor...');
        
        // Chart container'lara placeholder ekle
        const chartContainers = document.querySelectorAll('canvas');
        chartContainers.forEach(canvas => {
            const ctx = canvas.getContext('2d');
            ctx.fillStyle = '#f0f0f0';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#999';
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Y√ºkleniyor...', canvas.width / 2, canvas.height / 2);
        });
        
        console.log('üìä Chart placeholders g√∂steriliyor');
    }

    /**
     * A≈ûAMA 4: Ger√ßek verileri arka planda y√ºkle
     */
    async loadFullDataInBackground() {
        try {
            this.updateProgress(80, 'üì¶ Detaylƒ± veriler y√ºkleniyor...');
            
            // Normal DataLoader kullan (Lazy Loading yerine)
            if (window.DataLoader) {
                await window.DataLoader.loadAllData();
                console.log('‚úÖ T√ºm veriler DataLoader\'a y√ºklendi');
            }
            
            this.updateProgress(100, '‚úÖ Hazƒ±r!');
            
            // Dashboard'ƒ± g√ºncelle
            if (window.Dashboard) {
                window.Dashboard.updateDashboard();
            }
            
            // Loading screen'i gizle
            setTimeout(() => {
                this.hideLoadingScreen();
            }, 500);
            
        } catch (error) {
            console.error('‚ùå Tam veri y√ºkleme hatasƒ±:', error);
            
            // Hata olsa bile loading screen'i gizle
            setTimeout(() => {
                this.hideLoadingScreen();
            }, 1000);
            
            throw error;
        }
    }

    /**
     * Progress bar g√ºncelle
     */
    updateProgress(percent, message) {
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const loadingMessage = document.getElementById('loadingMessage');
        
        if (progressBar) {
            progressBar.style.width = `${percent}%`;
        }
        
        if (progressText) {
            progressText.textContent = `${percent}%`;
        }
        
        if (loadingMessage) {
            loadingMessage.textContent = message;
        }
        
        console.log(`üìà Progress: ${percent}% - ${message}`);
    }

    /**
     * √ñzet kartlarƒ± g√∂ster
     */
    showSummaryCards(summary) {
        // Toplam satƒ±≈ü
        const totalSalesEl = document.getElementById('dashTotalSales');
        if (totalSalesEl && summary.totalSales) {
            totalSalesEl.textContent = `$${summary.totalSales.toLocaleString('tr-TR')}`;
        }
        
        // Toplam m√º≈üteri
        const totalCustomersEl = document.getElementById('dashTotalCustomers');
        if (totalCustomersEl && summary.totalCustomers) {
            totalCustomersEl.textContent = summary.totalCustomers.toLocaleString('tr-TR');
        }
        
        console.log('‚úÖ √ñzet kartlarƒ± g√∂sterildi');
    }

    /**
     * Loading screen'i gizle
     */
    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loadingScreen');
        const mainContainer = document.getElementById('mainContainer');
        
        if (loadingScreen) {
            loadingScreen.style.opacity = '0';
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 300);
        }
        
        if (mainContainer) {
            mainContainer.style.display = 'block';
            mainContainer.style.opacity = '0';
            setTimeout(() => {
                mainContainer.style.opacity = '1';
            }, 100);
        }
        
        console.log('‚úÖ Loading screen gizlendi, dashboard g√∂steriliyor');
    }

    /**
     * T√ºm progressive loading s√ºrecini ba≈ülat
     */
    async startProgressiveLoading() {
        try {
            console.log('üöÄ Progressive loading ba≈ülƒ±yor...');
            
            // 1. Skeleton screen
            this.showSkeletonScreen();
            
            // 2. √ñzet veriler (1 saniye)
            await this.loadAndShowSummary();
            
            // 3. Chart placeholders
            this.showChartPlaceholders();
            
            // 4. Tam veriler (arka planda)
            await this.loadFullDataInBackground();
            
            console.log('‚úÖ Progressive loading tamamlandƒ±!');
            
        } catch (error) {
            console.error('‚ùå Progressive loading hatasƒ±:', error);
            if (window.ErrorHandler) {
                window.ErrorHandler.handleError(error);
            }
        }
    }
}

// Global ProgressiveLoader instance
window.ProgressiveLoader = new ProgressiveLoader();

console.log('üìà Progressive Loader module loaded successfully');

