/**
 * üé® Login UI Module
 * Login formu ve UI y√∂netimi
 */

class LoginUI {
    constructor() {
        this.authForm = null;
        this.usernameInput = null;
        this.passwordInput = null;
        this.loginBtn = null;
        this.errorDiv = null;
        this.init();
    }

    init() {
        console.log('üé® LoginUI initialized');
        
        // DOM elementlerini bul
        this.authForm = document.getElementById('authForm');
        this.usernameInput = document.getElementById('odooUsername');
        this.passwordInput = document.getElementById('odooPassword');
        this.loginBtn = document.getElementById('authLoginBtn');
        this.errorDiv = document.getElementById('authError');
    }

    /**
     * Login formunu g√∂ster
     */
    show() {
        if (this.authForm) {
            this.authForm.style.display = 'flex';
            console.log('üîê Login formu g√∂steriliyor');
            
            // Focus username input
            setTimeout(() => {
                if (this.usernameInput) {
                    this.usernameInput.focus();
                }
            }, 100);
        }
    }

    /**
     * Login formunu gizle
     */
    hide() {
        if (this.authForm) {
            this.authForm.style.display = 'none';
            console.log('‚úÖ Login formu gizlendi');
        }
    }

    /**
     * Loading durumu g√∂ster
     */
    showLoading() {
        if (this.loginBtn) {
            this.loginBtn.textContent = '‚è≥ Giri≈ü yapƒ±lƒ±yor...';
            this.loginBtn.disabled = true;
        }
    }

    /**
     * Loading durumunu kaldƒ±r
     */
    hideLoading() {
        if (this.loginBtn) {
            this.loginBtn.textContent = 'üîì Giri≈ü Yap';
            this.loginBtn.disabled = false;
        }
    }

    /**
     * Hata mesajƒ± g√∂ster
     */
    showError(message) {
        if (this.errorDiv) {
            this.errorDiv.textContent = message;
            this.errorDiv.style.display = 'block';
            this.errorDiv.style.background = '#fee';
            this.errorDiv.style.color = '#c33';
        }
        this.hideLoading();
    }

    /**
     * Ba≈üarƒ± mesajƒ± g√∂ster
     */
    showSuccess(message) {
        if (this.errorDiv) {
            this.errorDiv.textContent = message;
            this.errorDiv.style.display = 'block';
            this.errorDiv.style.background = '#efe';
            this.errorDiv.style.color = '#3c3';
        }
    }

    /**
     * Hata mesajƒ±nƒ± temizle
     */
    clearError() {
        if (this.errorDiv) {
            this.errorDiv.style.display = 'none';
        }
    }

    /**
     * Form deƒüerlerini al
     */
    getCredentials() {
        return {
            username: this.usernameInput?.value.trim() || '',
            password: this.passwordInput?.value || '',
            totp: document.getElementById('odooTotp')?.value.trim() || ''
        };
    }

    /**
     * Form deƒüerlerini temizle
     */
    clearForm() {
        if (this.usernameInput) this.usernameInput.value = '';
        if (this.passwordInput) this.passwordInput.value = '';
        if (document.getElementById('odooTotp')) document.getElementById('odooTotp').value = '';
        this.clearError();
    }

    /**
     * Login i≈ülemini ba≈ülat
     */
    async handleLogin() {
        try {
            this.clearError();
            this.showLoading();

            const { username, password, totp } = this.getCredentials();

            if (!username || !password) {
                this.showError('‚ùå Kullanƒ±cƒ± adƒ± ve ≈üifre gerekli');
                return;
            }
            
            if (!totp || totp.length !== 6) {
                this.showError('‚ùå 6 haneli 2FA kodu gerekli');
                return;
            }

            // OdooAuth ile login (2FA ile)
            const result = await window.OdooAuth.login(username, password, totp);

            if (result.success) {
                this.showSuccess('‚úÖ Giri≈ü ba≈üarƒ±lƒ±! Y√∂nlendiriliyorsunuz...');
                this.clearForm();
                
                // Dashboard'ƒ± g√∂ster
                setTimeout(() => {
                    this.hide();
                    if (window.showDashboardAfterAuth) {
                        window.showDashboardAfterAuth(result.user);
                    }
                }, 1000);
            }

        } catch (error) {
            console.error('‚ùå Login hatasƒ±:', error);
            this.showError(error.message || 'Giri≈ü yapƒ±lamadƒ±. L√ºtfen bilgilerinizi kontrol edin.');
        }
    }
}

// Global instance
window.LoginUI = new LoginUI();

// Global fonksiyon (eski kod uyumluluƒüu i√ßin)
window.odooLogin = function(username, password) {
    window.LoginUI.handleLogin();
};

console.log('‚úÖ Login UI module loaded');

